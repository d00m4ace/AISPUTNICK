# code/run.py
import os
import sys
import io
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage

from datetime import datetime, timedelta

from config import Config
from user_manager import UserManager
from ai_interface import AIInterface
from codebase_manager import CodebaseManager
from email_service import EmailService
from file_manager import FileManager

from utils.markdown_utils import escape_markdown_v2

from handlers.registration_handler import RegistrationHandler
from handlers.codebase_handler import CodebaseHandler
from handlers.file_handler import FileHandler

from spam_executor import SpamExecutor

# –ù–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
from handlers.agent_handlers.simple_agent_handler import SimpleAgentHandler

from agents.rag_singleton import init_rag_manager

from user_activity_logger import activity_logger

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class AIBot:

    def __init__(self):
        self.bot = Bot(token=Config.BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())

        self.user_manager = UserManager()
        self.codebase_manager = CodebaseManager(self.user_manager)
        self.rag_manager = init_rag_manager(self.codebase_manager)
        self.ai = AIInterface()
        self.email_service = EmailService()
        self.file_manager = FileManager(self.codebase_manager, self.ai)

        self.registration_handler = RegistrationHandler(
            self.bot, self.user_manager, self.email_service
        )
        self.codebase_handler = CodebaseHandler(
            self.bot, self.user_manager, self.codebase_manager, self.file_manager
        )
        self.file_handler = FileHandler(
            self.bot, self.user_manager, self.codebase_manager, self.file_manager
        )        

        # –ù–æ–≤—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
        self.agent_handler = SimpleAgentHandler(
            self.bot, self.user_manager, self.codebase_manager,
            self.file_manager, self.ai
        )

        self.file_handler.upload_handler.set_agent_handler(self.agent_handler)

        self.file_handler.set_agent_handler(self.agent_handler)

        self._setup_handlers()
        
        self.spam_executor = SpamExecutor(self.bot, self.user_manager)              

    async def cmd_check_spam(self, message: types.Message):
        user_id = str(message.from_user.id)

        if not await self.user_manager.is_admin(user_id):
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_text = self.spam_executor.get_broadcasts_schedule(months=6)
    
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–ª–∏–º–∏—Ç Telegram - 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000
    
        if len(schedule_text) <= max_length:
            await message.reply(schedule_text, parse_mode="Markdown")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
        
            for line in schedule_text.split("\n"):
                if len(current_part) + len(line) + 1 > max_length:
                    parts.append(current_part)
                    current_part = line + "\n"
                else:
                    current_part += line + "\n"
        
            if current_part:
                parts.append(current_part)
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            for i, part in enumerate(parts, 1):
                header = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(parts)}\n\n" if len(parts) > 1 else ""
                await message.reply(header + part, parse_mode="Markdown")
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    def _setup_handlers(self):

        self.registration_handler.register_handlers(self.dp)
        self.codebase_handler.register_handlers(self.dp)
        self.file_handler.register_handlers(self.dp)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
        self.agent_handler.register_handlers(self.dp)

        self.dp.message.register(self.cmd_start, F.text == "/start")
        self.dp.message.register(self.cmd_help, F.text == "/help")
        self.dp.message.register(self.cmd_status, F.text == "/status")
        self.dp.message.register(self.cmd_cancel, F.text == "/cancel")
        
        self.dp.message.register(self.cmd_check_spam, F.text == "/check_spam")

    async def cmd_start(self, message: types.Message, state):
        user_id = str(message.from_user.id)

        if await self.user_manager.user_exists(user_id):
            if await self.user_manager.is_active(user_id):
                text = (
                    f"–ü—Ä–∏–≤–µ—Ç\\! –Ø {escape_markdown_v2(Config.BOT_NAME)}\\.\n"
                    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
                    "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                    "/help \\- —Å–ø—Ä–∞–≤–∫–∞\n"
                    "/settings \\- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
                    "/status \\- —Å—Ç–∞—Ç—É—Å –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n"
                    "/codebases \\- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤—ã–º–∏ –±–∞–∑–∞–º–∏\n"
                    "/agents \\- üÜï —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –ò–ò –∞–≥–µ–Ω—Ç–∞–º"
                    "\n\n"
                    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ\\-–Ω–∏–±—É–¥—å\\!"
                )
                await message.reply(text, parse_mode="MarkdownV2")
            else:
                text = (
                    "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\\."
                )
                await message.reply(text, parse_mode="MarkdownV2")
        else:
            await self.registration_handler.start_registration(message, state)

    async def cmd_help(self, message: types.Message):
        user_id = str(message.from_user.id)

        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return

        help_text = (
            f"ü§ñ *{escape_markdown_v2(Config.BOT_NAME)} \\- –°–ø—Ä–∞–≤–∫–∞*\n\n"
            "*üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start \\- –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help \\- —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/status \\- —Å—Ç–∞—Ç—É—Å –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n"
            "/settings \\- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email\n\n"
            
            "*üìö –ö–æ–¥–æ–≤—ã–µ –±–∞–∑—ã:*\n"
            "/codebases \\- —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑\n"
            "/create\\_codebase \\- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
            "/active \\- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–∑—É\n"
            "/switch \\- –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –±–∞–∑–∞–º–∏\n"
            "/index\\_rag \\- –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–∑—É –¥–ª—è RAG\n\n"
            
            "*ü§ñ –ò–ò –ê–≥–µ–Ω—Ç—ã \\(–ù–û–í–û–ï\\!\\):*\n"
            "/agents \\- —Å–ø—Ä–∞–≤–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤\n"
            "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* @–∏–º—è\\_–∞–≥–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å\n"
            "*–ü—Ä–∏–º–µ—Ä:* @rag –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è?\n\n"
            
            "*üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:*\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É \\- –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É\n\n"
            
            "*üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏:*\n"
            "/files \\- –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n"
            "/search \\- –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏\n"
            "/download \\- —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
            "/delete \\- —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        )

        await message.reply(help_text, parse_mode="MarkdownV2")

    async def cmd_status(self, message: types.Message):
        user_id = str(message.from_user.id)

        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return

        status = self.ai.get_provider_status()

        text = "*üìä –°—Ç–∞—Ç—É—Å –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:*\n\n"
        for provider, info in status.items():
            emoji = "‚úÖ" if info["available"] else "‚ùå"
            provider_escaped = escape_markdown_v2(provider.upper())
            text += f"{emoji} *{provider_escaped}*\n"
            text += f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {escape_markdown_v2(str(info['models_count']))}\n"
            if info["default_model"]:
                text += f"  ‚Ä¢ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {escape_markdown_v2(info['default_model'])}\n"
            text += "\n"

        text += "*ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤:* ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
        text += "  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–∏–º—è\\_–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞\n"
        text += "  ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –∞–≥–µ–Ω—Ç @rag –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É\n"
        text += "  ‚Ä¢ /agents –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n"

        await message.reply(text, parse_mode="MarkdownV2")

    async def cmd_cancel(self, message: types.Message, state):
        current_state = await state.get_state()
        if current_state:
            await state.clear()
            await message.reply("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.", parse_mode="MarkdownV2")
        else:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã\\.", parse_mode="MarkdownV2")

    async def run(self):
        logger.info(f"–ó–∞–ø—É—Å–∫ {Config.BOT_NAME}...")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ò–ò –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")

        if not Config.BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return

        if not self.ai.has_api_key("openai") and not self.ai.has_api_key("anthropic"):
            logger.warning("–ù–µ—Ç API –∫–ª—é—á–µ–π –¥–ª—è –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤!")

        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()

def ensure_directories():
    os.makedirs(Config.DATA_DIR, exist_ok=True)
    os.makedirs(Config.USERS_DIR, exist_ok=True)

    os.makedirs(os.path.join(Config.DATA_DIR, "rag_indexes"), exist_ok=True)
    os.makedirs(os.path.join(Config.DATA_DIR, "rag_logs"), exist_ok=True)
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
    os.makedirs(os.path.join(Config.DATA_DIR, "agents"), exist_ok=True)
    os.makedirs(os.path.join(Config.DATA_DIR, "agents", "users"), exist_ok=True)
    os.makedirs(os.path.join(Config.DATA_DIR, "agents", "configs"), exist_ok=True)

async def main():
    ensure_directories()
    bot = AIBot()    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫
    await bot.spam_executor.start()    
    await activity_logger.start()

    try:
        await bot.run()
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫
        await bot.spam_executor.stop()
        await activity_logger.stop()

if __name__ == "__main__":
    asyncio.run(main())
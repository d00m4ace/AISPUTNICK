# code/converters/audio_converter.py
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenAI Whisper API
"""
import os
import logging
import tempfile
from typing import Tuple, Optional, BinaryIO
from pathlib import Path
import aiohttp
import asyncio

logger = logging.getLogger(__name__)


class AudioConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper API"""
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenAI
    SUPPORTED_FORMATS = {
        '.mp3', '.mp4', '.mpeg', '.mpga', '.m4a', '.wav', 
        '.webm', '.ogg', '.oga', '.opus', '.flac'
    }
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Whisper API - 25MB
    MAX_FILE_SIZE = 25 * 1024 * 1024  # 25MB
    
    # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (10 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ ‚âà 10MB)
    CHUNK_SIZE = 10 * 1024 * 1024  # 10MB
    
    def __init__(self, openai_api_key: str):
        self.api_key = openai_api_key
        self.api_url = "https://api.openai.com/v1/audio/transcriptions"
    
    def supports(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"""
        ext = os.path.splitext(filename.lower())[1]
        return ext in self.SUPPORTED_FORMATS
    
    async def convert_to_text(
        self, 
        audio_bytes: bytes, 
        filename: str,
        language: Optional[str] = None,
        progress_callback: Optional[callable] = None
    ) -> Tuple[bool, str, str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        Returns: (success, new_filename, transcribed_text)
        """
        base, ext = os.path.splitext(filename)
        new_name = f"{base}_transcript.txt"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            file_size = len(audio_bytes)
            
            if file_size > self.MAX_FILE_SIZE:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ
                if progress_callback:
                    await progress_callback(
                        f"üìä –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({self._format_size(file_size)})\n"
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —á–∞—Å—Ç—è–º..."
                    )
                
                text = await self._process_large_audio(
                    audio_bytes, filename, language, progress_callback
                )
            else:
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if progress_callback:
                    await progress_callback(
                        f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ ({self._format_size(file_size)})..."
                    )
                
                text = await self._transcribe_audio(
                    audio_bytes, filename, language
                )
            
            if text:
                logger.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {filename}")
                return True, new_name, text
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {filename}")
                return False, new_name, ""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return False, new_name, ""
    
    async def _transcribe_audio(
        self,
        audio_bytes: bytes,
        filename: str,
        language: Optional[str] = None
    ) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ Whisper API"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ MIME —Ç–∏–ø–∞
            ext = os.path.splitext(filename.lower())[1]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º multipart/form-data
            data = aiohttp.FormData()
            data.add_field(
                'file',
                audio_bytes,
                filename=filename,
                content_type=self._get_mime_type(ext)
            )
            data.add_field('model', 'whisper-1')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if language:
                data.add_field('language', language)
            
            # –î–æ–±–∞–≤–ª—è–µ–º prompt –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            data.add_field(
                'prompt',
                '–¢–æ—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è. –°–æ—Ö—Ä–∞–Ω—è–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.'
            )
            
            # –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            data.add_field('response_format', 'text')
            
            headers = {
                'Authorization': f'Bearer {self.api_key}'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    headers=headers,
                    data=data,
                    timeout=aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                ) as response:
                    if response.status == 200:
                        text = await response.text()
                        return text.strip()
                    else:
                        error_text = await response.text()
                        logger.error(f"Whisper API error {response.status}: {error_text}")
                        return ""
                        
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ")
            return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Whisper API: {e}")
            return ""
    
    async def _process_large_audio(
        self,
        audio_bytes: bytes,
        filename: str,
        language: Optional[str],
        progress_callback: Optional[callable]
    ) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è ffmpeg
        """
        try:
            import subprocess
            import shutil
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
            if not shutil.which("ffmpeg"):
                logger.error("ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª")
                if progress_callback:
                    await progress_callback(
                        "‚ùå –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è ffmpeg\n"
                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt-get install ffmpeg"
                    )
                return ""
            
            ext = os.path.splitext(filename.lower())[1]
            transcripts = []
            
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                input_path = os.path.join(temp_dir, f"input{ext}")
                with open(input_path, 'wb') as f:
                    f.write(audio_bytes)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                duration = await self._get_audio_duration(input_path)
                if duration <= 0:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ")
                    return ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 –º–∏–Ω—É—Ç
                chunk_duration = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                num_chunks = int((duration + chunk_duration - 1) / chunk_duration)
                
                if progress_callback:
                    await progress_callback(
                        f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n"
                        f"üî™ –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ {num_chunks} —á–∞—Å—Ç–µ–π..."
                    )
                
                for i in range(num_chunks):
                    start_time = i * chunk_duration
                    chunk_path = os.path.join(temp_dir, f"chunk_{i}{ext}")
                    
                    # –í—ã—Ä–µ–∑–∞–µ–º –∫—É—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é ffmpeg
                    cmd = [
                        'ffmpeg', '-i', input_path,
                        '-ss', str(start_time),
                        '-t', str(chunk_duration),
                        '-c', 'copy',  # –ë–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                        '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
                        chunk_path
                    ]
                    
                    result = subprocess.run(
                        cmd,
                        capture_output=True,
                        text=True
                    )
                    
                    if result.returncode != 0:
                        logger.error(f"ffmpeg –æ—à–∏–±–∫–∞: {result.stderr}")
                        continue
                    
                    # –ß–∏—Ç–∞–µ–º chunk
                    with open(chunk_path, 'rb') as f:
                        chunk_bytes = f.read()
                    
                    if progress_callback:
                        await progress_callback(
                            f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —á–∞—Å—Ç—å {i+1}/{num_chunks}\n"
                            f"‚è±Ô∏è {self._format_duration(start_time)} - "
                            f"{self._format_duration(min(start_time + chunk_duration, duration))}"
                        )
                    
                    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º chunk
                    chunk_text = await self._transcribe_audio(
                        chunk_bytes,
                        f"chunk_{i}{ext}",
                        language
                    )
                    
                    if chunk_text:
                        transcripts.append(chunk_text)
                    
                    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π chunk –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                    try:
                        os.unlink(chunk_path)
                    except:
                        pass
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    if i < num_chunks - 1:
                        await asyncio.sleep(1)
                
                if progress_callback:
                    await progress_callback(
                        f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–∞—Å—Ç–µ–π: {len(transcripts)}/{num_chunks}"
                    )
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                return "\n\n".join(transcripts)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            return ""
    
    async def _get_audio_duration(self, file_path: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        try:
            import subprocess
            import json
            
            cmd = [
                'ffprobe',
                '-v', 'quiet',
                '-print_format', 'json',
                '-show_format',
                file_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                data = json.loads(result.stdout)
                duration = float(data.get('format', {}).get('duration', 0))
                return duration
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
        return 0
    
    def _get_mime_type(self, ext: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MIME —Ç–∏–ø –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        mime_types = {
            '.mp3': 'audio/mpeg',
            '.mp4': 'audio/mp4',
            '.mpeg': 'audio/mpeg',
            '.mpga': 'audio/mpeg',
            '.m4a': 'audio/m4a',
            '.wav': 'audio/wav',
            '.webm': 'audio/webm',
            '.ogg': 'audio/ogg',
            '.oga': 'audio/ogg',
            '.opus': 'audio/opus',
            '.flac': 'audio/flac'
        }
        return mime_types.get(ext, 'audio/mpeg')
    
    def _format_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size < 1024.0:
                if unit == 'B':
                    return f"{size} {unit}"
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} TB"
    
    def _format_duration(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes:02d}:{secs:02d}"
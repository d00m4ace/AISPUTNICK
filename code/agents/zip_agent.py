# code/agents/zip_agent.py

import os
import json
import logging
import zipfile
import tempfile
import shutil
import re
import asyncio  # Add this line
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
from pathlib import Path
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from utils.markdown_utils import escape_markdown_v2
from agents.rag_singleton import get_rag_manager  

from converters.markdown_converter import MarkdownConverterManager
from converters.encoding_converter import EncodingConverter

try:
    import py7zr
    HAS_7Z_SUPPORT = True
except ImportError:
    HAS_7Z_SUPPORT = False
    logging.warning("py7zr –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7z –∞—Ä—Ö–∏–≤–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

logger = logging.getLogger(__name__)


class ZipAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É"""
    
    def __init__(self):
        self.name = "zip"
        self.config = self._load_default_config()
        self.processing_jobs = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.rag_manager = get_rag_manager()
        self.markdown_converter = MarkdownConverterManager(ai_interface=None)  # –ë–µ–∑ AI
        self.encoding_converter = EncodingConverter()
        
    def _load_default_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config_path = os.path.join(os.path.dirname(__file__), "configs", "zip_default.json")
        
        default_config = {
            "name": "zip",
            "type": "archive",
            "description": "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É",
            "supported_formats": [".zip", ".7z"],
            "max_archive_size": 52428800,  # 50MB
            "max_total_extracted_size": 104857600,  # 100MB
            "max_file_size": 5242880,  # 5MB
            "max_files_count": 500
        }
        
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    default_config.update(loaded_config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ ZIP –∞–≥–µ–Ω—Ç–∞: {e}")
                
        return default_config
    
    async def activate(self, message: types.Message, user_id: str, agent_handler) -> bool:
        """
        –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        """
        from utils.markdown_utils import escape_markdown_v2
    
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        codebase_manager = agent_handler.codebase_manager
        user_manager = agent_handler.user_manager
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await codebase_manager.get_user_codebases(user_id)
        active_codebase_id = user_codebases.get('active')
    
        if not active_codebase_id:
            await message.reply(
                "‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã*\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É:\n"
                "/create\\_codebase \\- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
                "/codebases \\- —Å–ø–∏—Å–æ–∫ –±–∞–∑",
                parse_mode="MarkdownV2"
            )
            return False
    
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        codebase_info = await codebase_manager.get_codebase_config(user_id, active_codebase_id)
        codebase_name = escape_markdown_v2(codebase_info.get('name', active_codebase_id) if codebase_info else active_codebase_id)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        if codebase_info and codebase_info.get('is_public'):
            if codebase_info.get('owner_id') != user_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —á–µ—Ä–µ–∑ user_manager
                owner_data = await user_manager.get_user(codebase_info.get('owner_id'))
                owner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                if owner_data:
                    first_name = owner_data.get('name', '')
                    last_name = owner_data.get('surname', '')
                    username = owner_data.get('telegram_username', '')
                
                    if first_name or last_name:
                        owner_name = f"{first_name} {last_name}".strip()
                    elif username and username != "–ù–µ —É–∫–∞–∑–∞–Ω":
                        owner_name = f"@{username}"
                    else:
                        owner_name = f"User_{codebase_info.get('owner_id', '')[:8]}"
            
                await message.reply(
                    f"‚ö†Ô∏è *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*\n\n"
                    f"–ê–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: `{codebase_name}` \\(–ø—É–±–ª–∏—á–Ω–∞—è\\)\n"
                    f"–í–ª–∞–¥–µ–ª–µ—Ü: {escape_markdown_v2(owner_name)}\n\n"
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ —á—É–∂—É—é –ø—É–±–ª–∏—á–Ω—É—é –±–∞–∑—É\\.\n"
                    f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—é –±–∞–∑—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é\\.",
                    parse_mode="MarkdownV2"
                )
                return False
    
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        base_type = "üìö –ü—É–±–ª–∏—á–Ω–∞—è" if codebase_info and codebase_info.get('is_public') else "üîí –õ–∏—á–Ω–∞—è"
    
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
        files_count, total_size = await codebase_manager.get_live_stats(user_id, active_codebase_id)
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await message.reply(
            f"üì¶ *–ê–≥–µ–Ω—Ç @{escape_markdown_v2(self.name)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            f"üìÇ *–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞:*\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{codebase_name}`\n"
            f"–¢–∏–ø: {base_type}\n"
            f"–§–∞–π–ª–æ–≤: {files_count}\n\n"
            f"*–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n"
            f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: \\.zip, \\.7z\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.config.get('max_archive_size', 52428800) // (1024*1024)} –ú–ë\n"
            f"‚Ä¢ –ë—É–¥—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
            f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: \\.txt, \\.pdf, \\.docx, \\.xlsx –∏ –¥—Ä\\.\n\n"
            f"–§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –±–∞–∑—É\n"
            f"–ü—É—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞\n\n"
            f"üí° –ö–æ–º–∞–Ω–¥—ã:\n"
            f"/codebases \\- —Å–º–µ–Ω–∏—Ç—å –±–∞–∑—É\n"
            f"/agent\\_stop \\- –æ—Ç–º–µ–Ω–∏—Ç—å",
            parse_mode="MarkdownV2"
        )
    
        return True

    def _is_text_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–º"""
        from config import Config
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if Config.is_text_file(filename):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        return self.markdown_converter.can_convert(filename)

    def _sanitize_path(self, path: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤"""
        import re
    
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        path = path.replace('\\', '/')
    
        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        path = path.lstrip('/')
    
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—É—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        base_path, ext = os.path.splitext(path)
    
        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—É—Ç–µ–π –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (flatten structure)
        flat_name = base_path.replace('/', '_')
    
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        flat_name = flat_name.replace(' ', '_')
    
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        flat_name = flat_name.lower()
        ext = ext.lower()
    
        # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        flat_name = re.sub(r'[^–∞-—è—ëa-z0-9._-]', '_', flat_name)
    
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        flat_name = re.sub(r'_{2,}', '_', flat_name)
    
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        flat_name = flat_name.strip('_')
    
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        result = flat_name + ext
    
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        max_length = 255
        if len(result) > max_length:
            max_name_length = max_length - len(ext) - 10
            flat_name = flat_name[:max_name_length]
            result = flat_name + ext
    
        # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not flat_name:
            result = f"file_{hash(path)[:8]}{ext}"
    
        return result    
    
    def _decode_content(self, content: bytes, filename: str) -> Optional[str]:
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
        encoding_config = self.config.get('encoding', {})
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        primary = encoding_config.get('primary', 'utf-8')
        try:
            return content.decode(primary)
        except (UnicodeDecodeError, LookupError):
            pass
        
        # –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        fallback_encodings = encoding_config.get('fallback_encodings', [
            'cp1251', 'cp866', 'koi8-r', 'iso-8859-5', 'latin-1', 'ascii'
        ])
        
        for encoding in fallback_encodings:
            try:
                return content.decode(encoding)
            except (UnicodeDecodeError, LookupError):
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ –∏ –≤–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if encoding_config.get('force_decode', True):
            errors = encoding_config.get('decode_errors', 'replace')
            try:
                # –ü—Ä–æ–±—É–µ–º —Å –∑–∞–º–µ–Ω–æ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                return content.decode('utf-8', errors=errors)
            except:
                try:
                    return content.decode('latin-1', errors=errors)
                except:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {filename}")
                    return None
        
        return None
    
    def _should_skip_file(self, path: str, size: int) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª"""
        filter_config = self.config.get('file_filters', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        max_file_size = self.config.get('max_file_size', 5242880)
        if size > max_file_size:
            return True, f"—Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ({size} > {max_file_size})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        if filter_config.get('skip_empty', True) and size == 0:
            return True, "–ø—É—Å—Ç–æ–π —Ñ–∞–π–ª"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        basename = os.path.basename(path)
        if filter_config.get('skip_hidden', True) and basename.startswith('.'):
            return True, "—Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if filter_config.get('skip_system', True):
            system_patterns = filter_config.get('system_patterns', [])
            for pattern in system_patterns:
                if pattern in path:
                    return True, f"—Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ ({pattern})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        security_config = self.config.get('security', {})
        if security_config.get('scan_for_suspicious', True):
            _, ext = os.path.splitext(path.lower())
            suspicious_exts = security_config.get('suspicious_extensions', [])
            if ext in suspicious_exts:
                return True, f"–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ({ext})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ path traversal
        if security_config.get('block_path_traversal', True):
            if '..' in path or path.startswith('/') or ':' in path:
                return True, "–ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        
        return False, ""
    
    async def _extract_zip(self, archive_path: str, temp_dir: str) -> Tuple[List[Dict], List[str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        extracted_files = []
        errors = []
        
        try:
            with zipfile.ZipFile(archive_path, 'r') as zip_file:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                file_list = zip_file.namelist()
                
                for file_path in file_list:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                        info = zip_file.getinfo(file_path)
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if info.is_dir():
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
                        should_skip, reason = self._should_skip_file(file_path, info.file_size)
                        if should_skip:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file_path}: {reason}")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                        if not self._is_text_file(file_path):
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {file_path}")
                            continue
                        
                        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        content = zip_file.read(file_path)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                        if self.markdown_converter.can_convert(file_path):
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ markdown
                            success, new_filename, text_content = await self.markdown_converter.convert_to_markdown(
                                user_id="system",  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                                file_bytes=content,
                                filename=file_path
                            )
    
                            if not success or not text_content:
                                errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {file_path}")
                                continue
    
                            # –ú–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .txt –≤ safe_name
                            base_name = os.path.splitext(file_path)[0]
                            safe_name = self._sanitize_path(f"{base_name}.txt")
                        else:
                            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                            text_content = self._decode_content(content, file_path)
                            if text_content is None:
                                errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: {file_path}")
                                continue
    
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å
                            safe_name = self._sanitize_path(file_path)
                        
                        extracted_files.append({
                            'original_path': file_path,
                            'safe_name': safe_name,
                            'content': text_content,
                            'size': len(text_content)
                        })
                        
                    except Exception as e:
                        error_msg = str(e) if hasattr(e, '__str__') else repr(e)
                        errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {error_msg}")
                        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {error_msg}")
                        
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ZIP –∞—Ä—Ö–∏–≤–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å ZIP –∞—Ä—Ö–∏–≤–æ–º: {e}")
            
        return extracted_files, errors

    async def _extract_7z(self, archive_path: str, temp_dir: str) -> Tuple[List[Dict], List[str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ 7z –∞—Ä—Ö–∏–≤–∞"""
        if not HAS_7Z_SUPPORT:
            return [], ["–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 7z –∞—Ä—Ö–∏–≤–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ py7zr: pip install py7zr"]
    
        extracted_files = []
        errors = []
    
        try:
            with py7zr.SevenZipFile(archive_path, mode='r') as archive:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                archive.extractall(path=temp_dir)
            
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ getnames()
                all_files = archive.getnames()
            
                for file_path in all_files:
                    try:
                        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                        full_path = os.path.join(temp_dir, file_path)
                    
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        if os.path.isdir(full_path):
                            continue
                    
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        if not os.path.exists(full_path):
                            logger.debug(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {full_path}")
                            continue
                    
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        file_size = os.path.getsize(full_path)
                    
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
                        should_skip, reason = self._should_skip_file(file_path, file_size)
                        if should_skip:
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file_path}: {reason}")
                            continue
                    
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                        if not self._is_text_file(file_path):
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {file_path}")
                            continue
                    
                        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        with open(full_path, 'rb') as f:
                            content = f.read()
                    
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                        if self.markdown_converter.can_convert(file_path):
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ markdown
                            success, new_filename, text_content = await self.markdown_converter.convert_to_markdown(
                                user_id="system",
                                file_bytes=content,
                                filename=file_path
                            )
    
                            if not success or not text_content:
                                errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {file_path}")
                                continue
    
                            # –ú–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ .txt –≤ safe_name
                            base_name = os.path.splitext(file_path)[0]
                            safe_name = self._sanitize_path(f"{base_name}.txt")
                        else:
                            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                            text_content = self._decode_content(content, file_path)
                            if text_content is None:
                                errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: {file_path}")
                                continue
    
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å
                            safe_name = self._sanitize_path(file_path)
                    
                        extracted_files.append({
                            'original_path': file_path,
                            'safe_name': safe_name,
                            'content': text_content,
                            'size': len(text_content)
                        })
                    
                        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {file_path} -> {safe_name}")
                    
                    except Exception as e:
                        error_msg = str(e) if hasattr(e, '__str__') else repr(e)
                        errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {error_msg}")
                        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {error_msg}")
                    
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è 7z –∞—Ä—Ö–∏–≤–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å 7z –∞—Ä—Ö–∏–≤–æ–º: {e}", exc_info=True)
    
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –∞—Ä—Ö–∏–≤–∞)
            try:
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º –∞—Ä—Ö–∏–≤
                        if file_path != archive_path:
                            try:
                                os.remove(file_path)
                            except:
                                pass
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                for root, dirs, files in os.walk(temp_dir, topdown=False):
                    for dir_name in dirs:
                        try:
                            os.rmdir(os.path.join(root, dir_name))
                        except:
                            pass
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            
        return extracted_files, errors    
  
    async def handle_document(self, message: types.Message, state: FSMContext, agent_handler):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"""
        user_id = str(message.from_user.id)
    
        if not message.document:
            await message.reply("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        filename = message.document.file_name.lower()
        _, ext = os.path.splitext(filename)
    
        supported_formats = self.config.get('supported_formats', ['.zip', '.7z'])
        if ext not in supported_formats:
            await message.reply(
                f"‚ö†Ô∏è *–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞*\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {escape_markdown_v2(', '.join(supported_formats))}\n"
                f"–ü–æ–ª—É—á–µ–Ω: {escape_markdown_v2(ext)}",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        max_size = self.config.get('max_archive_size', 52428800)
        if message.document.file_size > max_size:
            await message.reply(
                f"‚ö†Ô∏è *–ê—Ä—Ö–∏–≤ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π*\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size // (1024*1024)} –ú–ë\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –∞—Ä—Ö–∏–≤–∞: {message.document.file_size // (1024*1024)} –ú–ë",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ agent_handler
        codebase_manager = agent_handler.codebase_manager
        file_manager = agent_handler.file_manager
        user_manager = agent_handler.user_manager
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await codebase_manager.get_user_codebases(user_id)
        active_codebase_id = user_codebases.get('active')
    
        if not active_codebase_id:
            await message.reply(
                "‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã*\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É:\n"
                "/create\\_codebase \\- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
                "/codebases \\- —Å–ø–∏—Å–æ–∫ –±–∞–∑",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑        
        codebase_info = await codebase_manager.get_codebase_config(user_id, active_codebase_id)
        if codebase_info and codebase_info.get('is_public'):
            if codebase_info.get('owner_id') != user_id:
                await message.reply(
                    "‚ö†Ô∏è *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤*\n\n"
                    "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ —á—É–∂—É—é –ø—É–±–ª–∏—á–Ω—É—é –±–∞–∑—É\\.\n"
                    "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—é –±–∞–∑—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é\\.",
                    parse_mode="MarkdownV2"
                )
                return
    
        processing_msg = await message.reply(
            f"üì¶ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞*\n\n"
            f"–§–∞–π–ª: `{escape_markdown_v2(message.document.file_name)}`\n"
            f"–†–∞–∑–º–µ—Ä: {message.document.file_size // 1024} –ö–ë\n\n"
            f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞\\.\\.\\.",
            parse_mode="MarkdownV2"
        )
    
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = None
        temp_archive = None
    
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            extraction_config = self.config.get('extraction', {})
            temp_base = extraction_config.get('temp_dir', 'temp_extract')
            temp_dir = tempfile.mkdtemp(prefix=f"{temp_base}_")
        
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
            file = await message.bot.get_file(message.document.file_id)
            file_data = await message.bot.download_file(file.file_path)
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_archive = os.path.join(temp_dir, f"archive{ext}")
            with open(temp_archive, 'wb') as f:
                if hasattr(file_data, 'read'):
                    f.write(file_data.read())
                else:
                    f.write(file_data)
        
            await processing_msg.edit_text(
                f"üì¶ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞*\n\n"
                f"–§–∞–π–ª: `{escape_markdown_v2(message.document.file_name)}`\n"
                f"–†–∞–∑–º–µ—Ä: {message.document.file_size // 1024} –ö–ë\n\n"
                f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞\\.\\.\\.",
                parse_mode="MarkdownV2"
            )
        
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if ext == '.zip':
                extracted_files, errors = await self._extract_zip(temp_archive, temp_dir)
            elif ext == '.7z':
                extracted_files, errors = await self._extract_7z(temp_archive, temp_dir)
            else:
                extracted_files, errors = [], [f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}"]
        
            if not extracted_files and errors:
                await processing_msg.edit_text(
                    f"‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏*\n\n"
                    f"{escape_markdown_v2(chr(10).join(errors[:5]))}",
                    parse_mode="MarkdownV2"
                )
                return
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
            total_size = sum(f['size'] for f in extracted_files)
            max_total_size = self.config.get('max_total_extracted_size', 104857600)
            if total_size > max_total_size:
                await processing_msg.edit_text(
                    f"‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞*\n\n"
                    f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {total_size // (1024*1024)} –ú–ë\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_total_size // (1024*1024)} –ú–ë",
                    parse_mode="MarkdownV2"
                )
                return
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            max_files = self.config.get('max_files_count', 500)
            if len(extracted_files) > max_files:
                extracted_files = extracted_files[:max_files]
                errors.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–µ—Ä–≤—ã–µ {max_files}")
        
            await processing_msg.edit_text(
                f"üì¶ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞*\n\n"
                f"–§–∞–π–ª: `{escape_markdown_v2(message.document.file_name)}`\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(extracted_files)}\n\n"
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É\\.\\.\\.",
                parse_mode="MarkdownV2"
            )
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
            saved_count = 0
            skipped_count = 0
            save_errors = []
            saved_files = []
        
            extraction_config = self.config.get('extraction', {})
            overwrite = extraction_config.get('overwrite_existing', False)
            add_index = extraction_config.get('add_index_on_conflict', True)
        
            for file_info in extracted_files:
                try:
                    safe_name = file_info['safe_name']
    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    success, message_text, _ = await file_manager.save_file(
                        user_id=user_id,
                        codebase_id=active_codebase_id,
                        filename=safe_name,
                        file_data=file_info['content'].encode('utf-8'),
                        skip_conversion=True
                    )
    
                    if success:
                        saved_count += 1
                        saved_files.append({
                            'name': safe_name,
                            'original': file_info['original_path'],
                            'size': file_info['size']
                        })
                    else:
                        save_errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {safe_name}")
                    
                except Exception as e:
                    save_errors.append(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_info['safe_name']}: {str(e)}")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
                # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if saved_count % 10 == 0:
                    try:
                        await processing_msg.edit_text(
                            f"üì¶ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞*\n\n"
                            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {saved_count}/{len(extracted_files)}\\.\\.\\.",
                            parse_mode="MarkdownV2"
                        )
                    except TelegramBadRequest:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å            

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            codebase_name = codebase_info.get('name', active_codebase_id) if codebase_info else active_codebase_id
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
            base_type = "üìö –ü—É–±–ª–∏—á–Ω–∞—è" if codebase_info and codebase_info.get('is_public') else "üîí –õ–∏—á–Ω–∞—è"
        
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            files_count, total_base_size = await codebase_manager.get_live_stats(user_id, active_codebase_id)
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report_text = f"‚úÖ –ê—Ä—Ö–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n\n"
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ
            report_text += f"üìÇ –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {codebase_name}\n"
            report_text += f"   ‚îî –¢–∏–ø: {base_type}\n"
            report_text += f"   ‚îî ID: {active_codebase_id}\n"
            report_text += f"\n"
        
            report_text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏:\n"
            report_text += f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(extracted_files)}\n"
            report_text += f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}\n"

            if skipped_count > 0:
                report_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ): {skipped_count}\n"

            if errors:
                report_text += f"‚Ä¢ –û—à–∏–±–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {len(errors)}\n"

            if save_errors:
                report_text += f"‚Ä¢ –û—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(save_errors)}\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            report_text += f"\nüìÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã:\n"
            report_text += f"   ‚îî –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n"
            report_text += f"   ‚îî –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {file_manager.format_size(total_base_size)}\n"

            report_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /files –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤"
            report_text += f"\nüîÑ /switch –¥–ª—è —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã"

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º
            report = escape_markdown_v2(report_text)

            await processing_msg.edit_text(report, parse_mode="MarkdownV2")
        
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é RAG –≤ —Ñ–æ–Ω–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if saved_count > 0:
                asyncio.create_task(self._update_rag_index(
                    user_id,
                    active_codebase_id,
                    codebase_manager
                ))
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
            try:
                await processing_msg.edit_text(
                    f"‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n"
                    f"{escape_markdown_v2(str(e))}",
                    parse_mode="MarkdownV2"
                )
            except:
                await message.reply(
                    f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}",
                    parse_mode="MarkdownV2"
                )
    
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_dir and os.path.exists(temp_dir):
                try:
                    shutil.rmtree(temp_dir)
                    logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {temp_dir} —É–¥–∞–ª–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")  
    async def _update_rag_index(self, user_id: str, codebase_id: str, codebase_manager):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RAG –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
            codebase_dir = codebase_manager._get_codebase_dir(user_id, codebase_id)
            files_dir = os.path.join(codebase_dir, "files")
        
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            success, msg = await self.rag_manager.update_incremental(
                user_id=user_id,
                codebase_id=codebase_id,
                files_dir=files_dir
            )
        
            if success and "–æ–±–Ω–æ–≤–ª–µ–Ω–æ 0 —Ñ–∞–π–ª–æ–≤" not in msg.lower():
                logger.info(f"RAG –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: {msg}")
            else:
                logger.debug(f"RAG –∏–Ω–¥–µ–∫—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω: {msg}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RAG –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    async def process(self, user_id: str, query: str, context: Dict[str, Any]) -> Tuple[bool, str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∞–≥–µ–Ω—Ç—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return False, "‚ùå –ê–≥–µ–Ω—Ç @zip —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∞—Ä—Ö–∏–≤–∞–º–∏\\.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ \\.zip –∏–ª–∏ \\.7z —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞\\."
    
    def get_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        return self.config.copy()
    
    def set_config(self, config: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config = config
# code/agents/rag_agent.py

import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
from utils.markdown_utils import escape_markdown_v2
from utils.codebase_utils import _get_owner_params_and_settings
from aiogram import types, F
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

class RagAgent:
    """RAG –∞–≥–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
    
    def __init__(self):
        self.name = "rag"
        self.config = self._load_default_config()
        self.rag_manager = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        self.temp_document_context = {}  # {user_id: {'content': str, 'filename': str, 'timestamp': datetime}}


    async def handle_document(self, message: types.Message, state: FSMContext, agent_handler):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è RAG –∞–≥–µ–Ω—Ç–∞
        RAG –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        user_id = str(message.from_user.id)
    
        # RAG –∞–≥–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from config import Config
        if not Config.is_text_file(message.document.file_name):
            await message.reply(
                "‚ö†Ô∏è RAG –∞–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\\.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ –ö–æ–¥: \\.py, \\.js, \\.java, \\.cpp –∏ –¥—Ä\\.\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç: \\.txt, \\.md, \\.json, \\.xml –∏ –¥—Ä\\.\n"
                "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥–∏: \\.yaml, \\.ini, \\.conf –∏ –¥—Ä\\.",
                parse_mode="MarkdownV2"
            )
            return
    
        processing_msg = await message.reply("üìÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è RAG –∞–Ω–∞–ª–∏–∑–∞\\.\\.\\.", parse_mode="MarkdownV2")
    
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file = await agent_handler.bot.get_file(message.document.file_id)
            file_data = await agent_handler.bot.download_file(file.file_path)
        
            if hasattr(file_data, 'getvalue'):
                file_bytes = file_data.getvalue()
            else:
                file_bytes = file_data
        
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                content = file_bytes.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    content = file_bytes.decode('cp1251')
                except:
                    content = file_bytes.decode('latin-1')
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.temp_document_context[user_id] = {
                'content': content,
                'filename': message.document.file_name,
                'timestamp': datetime.now(),
                'size': len(content)
            }
        
            await processing_msg.delete()
        
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
            lines = content.split('\n')
            num_lines = len(lines)
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(message.document.file_name)[1].lower()
            file_type = self._detect_file_type(file_ext, content)
        
            info_msg = f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç *{escape_markdown_v2(message.document.file_name)}* –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è RAG –∞–Ω–∞–ª–∏–∑–∞\n\n"
            info_msg += f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:*\n"
            info_msg += f"‚Ä¢ –¢–∏–ø: {escape_markdown_v2(file_type)}\n"
            info_msg += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤\n"
            info_msg += f"‚Ä¢ –°—Ç—Ä–æ–∫: {num_lines:,}\n\n"
        
            info_msg += "üîç *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:*\n"
            info_msg += "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —ç—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ\n"
            info_msg += "‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            info_msg += "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n\n"
        
            info_msg += "üí° *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if file_type == "Python –∫–æ–¥":
                info_msg += "`@rag –Ω–∞–π–¥–∏ –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –∏—Ö –º–µ—Ç–æ–¥—ã`\n"
                info_msg += "`@rag –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è X`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–¥ –≤ –±–∞–∑–µ`\n"
            elif file_type == "JavaScript –∫–æ–¥":
                info_msg += "`@rag –Ω–∞–π–¥–∏ –≤—Å–µ —ç–∫—Å–ø–æ—Ä—Ç—ã`\n"
                info_msg += "`@rag –∫–∞–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –±–∞–∑–µ`\n"
            elif file_type == "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è":
                info_msg += "`@rag –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`\n"
                info_msg += "`@rag —Å—Ä–∞–≤–Ω–∏ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ –≤ –±–∞–∑–µ`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`\n"
            elif file_type == "Markdown":
                info_msg += "`@rag —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –ø–æ—Ö–æ–∂—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –±–∞–∑–µ`\n"
            else:
                info_msg += "`@rag —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª`\n"
                info_msg += "`@rag –Ω–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã`\n"
                info_msg += "`@rag —Å—Ä–∞–≤–Ω–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑–µ`\n"
        
            info_msg += f"\n‚è±Ô∏è *–ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω 30 –º–∏–Ω—É—Ç*"
            info_msg += f"\n\nüí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agent\\_stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–æ–º –∏ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞_"
        
            await message.reply(info_msg, parse_mode="MarkdownV2")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è RAG: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {escape_markdown_v2(str(e))}", parse_mode="MarkdownV2")

    def _detect_file_type(self, ext: str, content: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        if ext in ['.py']:
            return "Python –∫–æ–¥"
        elif ext in ['.js', '.jsx', '.ts', '.tsx']:
            return "JavaScript –∫–æ–¥"
        elif ext in ['.java']:
            return "Java –∫–æ–¥"
        elif ext in ['.cpp', '.cc', '.c', '.h', '.hpp']:
            return "C/C++ –∫–æ–¥"
        elif ext in ['.cs']:
            return "C# –∫–æ–¥"
        elif ext in ['.go']:
            return "Go –∫–æ–¥"
        elif ext in ['.rs']:
            return "Rust –∫–æ–¥"
        elif ext in ['.json', '.yaml', '.yml', '.toml', '.ini', '.conf']:
            return "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        elif ext in ['.md', '.markdown']:
            return "Markdown"
        elif ext in ['.txt', '.text']:
            return "–¢–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
        elif ext in ['.sql']:
            return "SQL —Å–∫—Ä–∏–ø—Ç"
        elif ext in ['.html', '.htm']:
            return "HTML –¥–æ–∫—É–º–µ–Ω—Ç"
        elif ext in ['.css', '.scss', '.sass']:
            return "CSS —Å—Ç–∏–ª–∏"
        elif ext in ['.xml']:
            return "XML –¥–æ–∫—É–º–µ–Ω—Ç"
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if 'import ' in content or 'from ' in content:
                return "–ö–æ–¥"
            elif content.strip().startswith('{') or content.strip().startswith('['):
                return "JSON –¥–∞–Ω–Ω—ã–µ"
            else:
                return "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"

    def _clean_expired_contexts(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)"""
        current_time = datetime.now()
        expired_users = []
    
        for user_id, context in self.temp_document_context.items():
            if (current_time - context['timestamp']).total_seconds() > 1800:  # 30 –º–∏–Ω—É—Ç
                expired_users.append(user_id)
    
        for user_id in expired_users:
            del self.temp_document_context[user_id]
            logger.info(f"–û—á–∏—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        
    def _load_default_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config_path = os.path.join(os.path.dirname(__file__), "configs", "rag_default.json")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        default_config = {}
        
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    for key, value in loaded_config.items():
                        default_config[key] = value
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ RAG –∞–≥–µ–Ω—Ç–∞: {e}")
        
        return default_config
    
    def set_rag_manager(self, rag_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ RAG"""
        self.rag_manager = rag_manager
    
    async def process(
        self,
        user_id: str,
        query: str,
        context: Dict[str, Any]
    ) -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ RAG –∞–≥–µ–Ω—Ç—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å managers (codebase_manager, file_manager, ai_interface)
        
        Returns:
            (success, response) - —É—Å–ø–µ—Ö –∏ –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
        """
        try:
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
            self._clean_expired_contexts()
        
            codebase_manager = context.get('codebase_manager')
            ai_interface = context.get('ai_interface')
        
            if not all([codebase_manager, ai_interface, self.rag_manager]):
                return False, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã RAG –∞–≥–µ–Ω—Ç–∞"
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            if self.config.get('codebase') == 'default':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_codebases = await codebase_manager.get_user_codebases(user_id)
                active_codebase_id = user_codebases.get('active')
            
                if not active_codebase_id:
                    return False, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            
                logger.info(f"RAG: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {active_codebase_id}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –∫–æ–Ω—Ñ–∏–≥–µ –±–∞–∑—É
                active_codebase_id = self.config.get('codebase')
                logger.info(f"RAG: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {active_codebase_id}")
        
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
            codebase_config = await codebase_manager.get_codebase_config(user_id, active_codebase_id)
            if not codebase_config:
                logger.error(f"RAG: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–∞–∑—ã {active_codebase_id}")
                return False, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã '{escape_markdown_v2(active_codebase_id)}'"
        
            logger.info(f"RAG: –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π '{codebase_config['name']}' (ID: {active_codebase_id})")
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            temp_doc = self.temp_document_context.get(user_id)
            additional_context = ""
            temp_doc_info = None
        
            if temp_doc:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ —Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
                time_diff = (datetime.now() - temp_doc['timestamp']).total_seconds()
                if time_diff <= 1800:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    max_doc_context = self.config.get('max_temp_document_size', 10000)
                    doc_content = temp_doc['content'][:max_doc_context]
                
                    additional_context = f"\n--- –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {temp_doc['filename']} ---\n"
                    additional_context += doc_content
                
                    if len(temp_doc['content']) > max_doc_context:
                        additional_context += f"\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_doc_context} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {temp_doc['size']}) ..."
                
                    temp_doc_info = {
                        'filename': temp_doc['filename'],
                        'size': temp_doc['size'],
                        'time_remaining': int((1800 - time_diff) / 60)  # –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å
                    }
                
                    logger.info(f"RAG: –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ {temp_doc['filename']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    del self.temp_document_context[user_id]
                    logger.info(f"RAG: –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner_id, real_codebase_id, owner_rag_settings = _get_owner_params_and_settings(user_id, active_codebase_id)
        
            if owner_id != user_id:
                logger.info(f"RAG: –ü—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞, –≤–ª–∞–¥–µ–ª–µ—Ü: {owner_id}, —Ä–µ–∞–ª—å–Ω—ã–π ID: {real_codebase_id}")
            else:
                logger.info(f"RAG: –õ–∏—á–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±–∞–∑—ã
            codebase_dir = codebase_manager._get_codebase_dir(user_id, active_codebase_id)
            files_dir = os.path.join(codebase_dir, "files")
            logger.info(f"RAG: –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º: {files_dir}")
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            index_status = await self.rag_manager.check_index_status(
                owner_id,
                real_codebase_id,
                files_dir
            )
        
            logger.info(f"RAG: –°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞ - exists: {index_status.get('exists')}, needs_update: {index_status.get('needs_update')}")
        
            if not index_status.get('exists'):
                return False, f"‚ùå RAG –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–∞–∑—ã '{escape_markdown_v2(codebase_config['name'])}'\\. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /index\\_rag"
        
            warning_msg = ""
            if index_status.get('needs_update'):
                warning_msg = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {escape_markdown_v2(index_status.get('reason', '–ò–Ω–¥–µ–∫—Å —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'))}\\. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å\\.\n\n"
        
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG
            rag_settings = self.config.get('rag_settings', {})
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if owner_rag_settings:
                rag_settings.update(owner_rag_settings)
                logger.info(f"RAG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∞–∑—ã")
        
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ RAG
            search_results = await self.rag_manager.search(
                owner_id,
                real_codebase_id,
                query,
                top_k=rag_settings.get('max_context_chunks', 5)
            )
        
            logger.info(f"RAG: –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
        
            # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            rag_context = self._build_context_from_search(
                search_results,
                codebase_config['name'],
                rag_settings.get('search_threshold', 0.03)
            )
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self.config.get('system_prompt', '')
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if additional_context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{additional_context}"
                logger.info(f"RAG: –î–æ–±–∞–≤–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(additional_context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG –ø–æ–∏—Å–∫–∞
            if rag_context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã '{codebase_config['name']}':\n{rag_context}"
                logger.info(f"RAG: –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–ª–∏–Ω–æ–π {len(rag_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            elif not additional_context:
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                logger.info("RAG: –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å
            ai_settings = self.config.get('ai_settings', {})
            ai_provider = ai_settings.get('provider', 'default')
            ai_model = ai_settings.get('model', 'default')
        
            if ai_provider == 'default':
                if ai_interface.has_api_key('openai'):
                    ai_provider = 'openai'
                elif ai_interface.has_api_key('anthropic'):
                    ai_provider = 'anthropic'
                else:
                    return False, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            ai_params = {}
            if ai_provider == "openai":
                ai_params["max_completion_tokens"] = ai_settings.get("max_completion_tokens", ai_settings.get("max_tokens", None))
                ai_params["temperature"] = ai_settings.get('temperature', 1.0)
            else:
                ai_params["max_tokens"] = ai_settings.get("max_tokens", ai_settings.get("max_completion_tokens", None))
                ai_params["temperature"] = ai_settings.get('temperature', 1.0)
        
            response = await ai_interface.send_simple_request(
                user_id=user_id,
                provider=ai_provider,
                prompt=query,
                system_prompt=system_prompt,
                model=ai_model if ai_model != 'default' else None,
                **ai_params
            )
        
            if not response:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            result = escape_markdown_v2(response)
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            sources_info = []
        
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
            if temp_doc_info:
                sources_info.append(
                    f"üìé *–î–æ–∫—É–º–µ–Ω—Ç:* {escape_markdown_v2(temp_doc_info['filename'])} "
                    f"\\(–∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ {temp_doc_info['time_remaining']} –º–∏–Ω\\)"
                )
        
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏–∑ –±–∞–∑—ã
            if search_results and rag_settings.get('include_filenames', True):
                files_used = list(set(r['filename'] for r in search_results))
                files_str = ", ".join([escape_markdown_v2(f) for f in files_used[:3]])
                if len(files_used) > 3:
                    files_str += f" –∏ –µ—â–µ {len(files_used) - 3}"
                sources_info.append(f"üìÇ *–§–∞–π–ª—ã –∏–∑ –±–∞–∑—ã:* {files_str}")
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            if sources_info:
                result += "\n\n" + "\n".join(sources_info)
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
            result += f"\n\nüìö *–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:* {escape_markdown_v2(codebase_config['name'])}"
        
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if self.config.get('show_stats', False):
                stats = []
                if search_results:
                    avg_relevance = sum(r.get('relevance', 0) for r in search_results) / len(search_results)
                    stats.append(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {avg_relevance:.2%}")
                if temp_doc_info:
                    stats.append(f"–î–æ–∫—É–º–µ–Ω—Ç: {temp_doc_info['size']:,} —Å–∏–º–≤–æ–ª–æ–≤")
                if stats:
                    result += f"\n\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:* {', '.join(stats)}"
        
            if warning_msg:
                result = warning_msg + result
        
            return True, result
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ RAG –∞–≥–µ–Ω—Ç–µ: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {escape_markdown_v2(str(e))}"

  
    def _build_context_from_search(
        self,
        search_results: List[Dict[str, Any]],
        codebase_name: str,
        threshold: float
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not search_results:
            return ""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_results = [
            r for r in search_results
            if r.get('relevance', 0) >= threshold
        ]
        
        if not relevant_results:
            # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø–æ—Ä–æ–≥
            relevant_results = search_results[:3] if search_results else []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
        files_chunks = {}
        for result in relevant_results:
            filename = result['filename']
            if filename not in files_chunks:
                files_chunks[filename] = []
            files_chunks[filename].append(result)
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        for filename, chunks in files_chunks.items():
            context_parts.append(f"\n--- –§–∞–π–ª: {filename} ---")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            chunks.sort(key=lambda x: x.get('chunk_idx', 0))
            
            for chunk in chunks:
                text = chunk['text'].strip()
                if text:
                    context_parts.append(text)
        
        return "\n".join(context_parts)
    
    def get_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞"""
        return self.config.copy()
    
    def set_config(self, config: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        config['owner_id'] = self.config.get('owner_id', 'system')
        config['access'] = self.config.get('access', 'public')
        self.config = config
# code/agents/nethack_agent.py

import os
import logging
import asyncio
from typing import Dict, Any, Tuple, Optional
from datetime import datetime
import sys
import json

from .async_qa import AsyncDocumentQA

logger = logging.getLogger(__name__)


class NethackAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.name = "nethack"
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if config:
            self.config = config
        else:
            self.config = self._load_default_config()
            
        self.qa_system = None
        self._init_qa_system()
        
    def _load_default_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        config_path = os.path.join(os.path.dirname(__file__), "configs", "nethack_default.json")
        
        default_config = {
            "name": "hero",
            "description": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–∑ —Å–µ—Ç–∏",
            "type": "nethack",
            "access": "public",
            
            "qa_config_path": "./NETHACK/acmecorp/config_aifaq.json",
            "access_config_path": "./NETHACK/acmecorp/doc_access.json",
            
            "response_settings": {
                "verbose": False,
                "show_sources": True,
                "max_answer_length": 20000,
                "fallback_message": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."
            },
            
            "cache_settings": {
                "enabled": True,
                "ttl_seconds": 600
            }
        }
        
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    for key, value in loaded_config.items():
                        default_config[key] = value
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ Nethack –∞–≥–µ–Ω—Ç–∞: {e}")
                
        return default_config
        
    def _init_qa_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
        try:
            # –ë–µ—Ä–µ–º –ø—É—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
            qa_config_path = self.config.get("qa_config_path")
            access_config_path = self.config.get("access_config_path")
            
            if not qa_config_path or not access_config_path:
                logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º QA —Å–∏—Å—Ç–µ–º—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not os.path.exists(qa_config_path):
                logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ QA –Ω–µ –Ω–∞–π–¥–µ–Ω: {qa_config_path}")
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs(os.path.dirname(qa_config_path), exist_ok=True)
                
            if not os.path.exists(access_config_path):
                logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {access_config_path}")
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs(os.path.dirname(access_config_path), exist_ok=True)
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≥–µ–Ω—Ç–∞ –≤ QA —Å–∏—Å—Ç–µ–º—É
            self.qa_system = AsyncDocumentQA(
                config_path=qa_config_path,
                access_config_path=access_config_path
            )
            
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—É—Ç—è–º–∏:")
            logger.info(f"  - QA config: {qa_config_path}")
            logger.info(f"  - Access config: {access_config_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QA —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
            self.qa_system = None
            
    async def reload_access_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        if self.qa_system:
            await self.qa_system.reload_access_config()
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
    def get_user_telegram_id(self, user_id: str) -> int:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ user_id –≤ Telegram ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å Telegram ID
            return int(user_id)
        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π ID
            # –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 0 –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            return 0
            
    def format_answer_with_sources(self, answer: str, selected_files: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not self.config.get("response_settings", {}).get("show_sources", True):
            return answer
            
        if selected_files:
            sources_text = "\n\nüìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n"
            for i, file in enumerate(selected_files, 1):
                # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                file_display = file.replace('.md', '').replace('.txt', '')
                sources_text += f"{i}. {file_display}\n"
            return answer + sources_text
        
        return answer
        
    async def process(
        self,
        user_id: str,
        query: str,
        context: Dict[str, Any]
    ) -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É QA
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            Tuple[—É—Å–ø–µ—Ö, –æ—Ç–≤–µ—Ç]
        """
        try:
            if not self.qa_system:
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
                self._init_qa_system()
                if not self.qa_system:
                    return False, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º Telegram ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            telegram_id = self.get_user_telegram_id(user_id)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            response_settings = self.config.get("response_settings", {})
            verbose = response_settings.get("verbose", False)
            max_length = response_settings.get("max_answer_length", 4000)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
            logger.info(f"Nethack –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query[:100]}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            available_docs = self.qa_system.get_user_documents(telegram_id)
            if not available_docs:
                return False, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ —Å–∏—Å—Ç–µ–º–µ"
            
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {len(available_docs)}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
            answer = await self.qa_system.process_question(
                question=query,
                user_id=telegram_id,
                verbose=verbose
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            if not answer or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in answer.lower():
                fallback = response_settings.get("fallback_message", 
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
                return False, fallback
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            if len(answer) > max_length:
                answer = answer[:max_length-100] + "\n\n... *(–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)*"
            
            formatted_answer = answer
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.config.get("cache_settings", {}).get("enabled", True):
                try:
                    await self.qa_system.cleanup_cache()
                except:
                    pass
            
            logger.info(f"Nethack —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å, –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(formatted_answer)}")
            return True, formatted_answer
            
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ Nethack")
            return False, "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Nethack –∞–≥–µ–Ω—Ç–µ: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            
    def get_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        return self.config.copy()
        
    def set_config(self, config: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_qa_config = self.config.get("qa_config_path")
        old_access_config = self.config.get("access_config_path")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = config
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º QA —Å–∏—Å—Ç–µ–º—É –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—É—Ç–∏
        new_qa_config = config.get("qa_config_path")
        new_access_config = config.get("access_config_path")
        
        if old_qa_config != new_qa_config or old_access_config != new_access_config:
            logger.info("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            logger.info(f"  –°—Ç–∞—Ä—ã–µ –ø—É—Ç–∏: QA={old_qa_config}, Access={old_access_config}")
            logger.info(f"  –ù–æ–≤—ã–µ –ø—É—Ç–∏: QA={new_qa_config}, Access={new_access_config}")
            self._init_qa_system()
            
    def update_config(self, updates: Dict[str, Any]):
        """–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_qa_config = self.config.get("qa_config_path")
        old_access_config = self.config.get("access_config_path")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        for key, value in updates.items():
            if isinstance(value, dict) and key in self.config and isinstance(self.config[key], dict):
                # –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –¥–µ–ª–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.config[key].update(value)
            else:
                self.config[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º
        new_qa_config = self.config.get("qa_config_path")
        new_access_config = self.config.get("access_config_path")
        
        if old_qa_config != new_qa_config or old_access_config != new_access_config:
            logger.info("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self._init_qa_system()
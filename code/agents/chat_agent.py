# code/agents/chat_agent.py

import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
from utils.markdown_utils import escape_markdown_v2
from utils.info_utils import info_chat_help_message, info_cmd_chat_message 
from aiogram import types, F
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

class ChatAgent:
    
    def __init__(self):
        self.name = "chat"
        self.config = self._load_default_config()
        
        # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞
        self.chat_histories: Dict[str, List[Dict[str, str]]] = {}
        self.user_file_contexts: Dict[str, List[Dict[str, Any]]] = {}
        
        logger.info(f"ChatAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")        

    def _load_default_config(self) -> Dict[str, Any]:
        config_path = os.path.join(os.path.dirname(__file__), "configs", "chat_default.json")
        
        default_config = {}
        
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    for key, value in loaded_config.items():
                        default_config[key] = value
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ Chat –∞–≥–µ–Ω—Ç–∞: {e}")
                
        return default_config


    def _delete_chat_history(self, user_id: str, chat_id: str) -> Tuple[bool, str]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            from config import Config
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            histories_dir = os.path.join(Config.DATA_DIR, "chat_histories")
            filename = f"{user_id}_{chat_id}.json"
            filepath = os.path.join(histories_dir, filename)
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(filepath):
                return False, f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å ID {escape_markdown_v2(chat_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if data.get('user_id') != user_id:
                        return False, "‚ùå –≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            except:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏"
        
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            os.remove(filepath)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞: {filepath}")
        
            return True, f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å ID {escape_markdown_v2(chat_id)} —É–¥–∞–ª–µ–Ω–∞"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {escape_markdown_v2(str(e))}"

    def _rename_chat_history(self, user_id: str, old_id: str, new_id: str) -> Tuple[bool, str]:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            from config import Config
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ ID
            if not new_id.replace('_', '').replace('-', '').isalnum():
                return False, "‚ùå –ù–æ–≤—ã–π ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, \\_ –∏ \\-"
        
            histories_dir = os.path.join(Config.DATA_DIR, "chat_histories")
            old_filename = f"{user_id}_{old_id}.json"
            new_filename = f"{user_id}_{new_id}.json"
            old_filepath = os.path.join(histories_dir, old_filename)
            new_filepath = os.path.join(histories_dir, new_filename)
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            if not os.path.exists(old_filepath):
                return False, f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å ID {escape_markdown_v2(old_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(new_filepath):
                return False, f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å ID {escape_markdown_v2(new_id)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –¥–∞–Ω–Ω—ã—Ö
            try:
                with open(old_filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if data.get('user_id') != user_id:
                        return False, "‚ùå –≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –≤ –¥–∞–Ω–Ω—ã—Ö
                data['chat_id'] = new_id
            
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
                with open(new_filepath, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                os.remove(old_filepath)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏: {e}")
                return False, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {escape_markdown_v2(str(e))}"
        
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_filepath} -> {new_filepath}")
        
            return True, f"‚úèÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n{escape_markdown_v2(old_id)} ‚Üí {escape_markdown_v2(new_id)}"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {escape_markdown_v2(str(e))}"

    def _save_chat_history(self, user_id: str, chat_id: str) -> Tuple[bool, str]:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            from config import Config
        
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π
            histories_dir = os.path.join(Config.DATA_DIR, "chat_histories")
            os.makedirs(histories_dir, exist_ok=True)
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{user_id}_{chat_id}.json"
            filepath = os.path.join(histories_dir, filename)
        
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_data = {
                'user_id': user_id,
                'chat_id': chat_id,
                'saved_at': datetime.now().isoformat(),
                'history': self._get_user_history(user_id),
                'files': self._get_user_files(user_id)
            }
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)
        
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            history_count = len(save_data['history'])
            files_count = len(save_data['files'])
        
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath} (—Å–æ–æ–±—â–µ–Ω–∏–π: {history_count}, —Ñ–∞–π–ª–æ–≤: {files_count})")
        
            return True, f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {escape_markdown_v2(chat_id)}\nüìù –°–æ–æ–±—â–µ–Ω–∏–π: {history_count}\nüìé –§–∞–π–ª–æ–≤: {files_count}"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {escape_markdown_v2(str(e))}"

    def _load_chat_history(self, user_id: str, chat_id: str) -> Tuple[bool, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            from config import Config
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            histories_dir = os.path.join(Config.DATA_DIR, "chat_histories")
            filename = f"{user_id}_{chat_id}.json"
            filepath = os.path.join(histories_dir, filename)
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(filepath):
                return False, f"‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å ID {escape_markdown_v2(chat_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(filepath, 'r', encoding='utf-8') as f:
                save_data = json.load(f)
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if save_data.get('user_id') != user_id:
                return False, "‚ùå –≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if 'history' in save_data:
                self.chat_histories[user_id] = save_data['history']
            else:
                self.chat_histories[user_id] = []
        
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
            if 'files' in save_data:
                self.user_file_contexts[user_id] = save_data['files']
            else:
                self.user_file_contexts[user_id] = []
        
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            history_count = len(self.chat_histories[user_id])
            files_count = len(self.user_file_contexts[user_id])
            saved_at = save_data.get('saved_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                saved_date = datetime.fromisoformat(saved_at)
                date_str = saved_date.strftime('%d.%m.%Y %H:%M')
            except:
                date_str = saved_at
        
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filepath} (—Å–æ–æ–±—â–µ–Ω–∏–π: {history_count}, —Ñ–∞–π–ª–æ–≤: {files_count})")
        
            return True, f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ \\(ID: {escape_markdown_v2(chat_id)}\\)\nüìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {escape_markdown_v2(date_str)}\nüìù –°–æ–æ–±—â–µ–Ω–∏–π: {history_count}\nüìé –§–∞–π–ª–æ–≤: {files_count}"
        
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ \\(–ø–æ–≤—Ä–µ–∂–¥–µ–Ω\\)"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {escape_markdown_v2(str(e))}"

    def _list_saved_histories(self, user_id: str) -> Tuple[bool, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from config import Config
        
            histories_dir = os.path.join(Config.DATA_DIR, "chat_histories")
            if not os.path.exists(histories_dir):
                return True, "üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π"
        
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_files = []
            prefix = f"{user_id}_"
        
            for filename in os.listdir(histories_dir):
                if filename.startswith(prefix) and filename.endswith('.json'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id
                    chat_id = filename[len(prefix):-5]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ .json
                    filepath = os.path.join(histories_dir, filename)
                
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                            saved_at = data.get('saved_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            history_count = len(data.get('history', []))
                            files_count = len(data.get('files', []))
                        
                            user_files.append({
                                'chat_id': chat_id,
                                'saved_at': saved_at,
                                'messages': history_count,
                                'files': files_count
                            })
                    except:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        user_files.append({
                            'chat_id': chat_id,
                            'saved_at': '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                            'messages': 0,
                            'files': 0
                        })
        
            if not user_files:
                return True, "üìÇ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π"
        
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            user_files.sort(key=lambda x: x['saved_at'], reverse=True)
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = f"üìö *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ \\({len(user_files)}\\):*\n"
        
            for item in user_files[:50]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                try:
                    saved_date = datetime.fromisoformat(item['saved_at'])
                    date_str = saved_date.strftime('%d.%m %H:%M')
                except:
                    date_str = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
                result += f"‚Ä¢ ID: `{escape_markdown_v2(item['chat_id'])}` \\- {escape_markdown_v2(date_str)}\n"
                result += f"  üìù {item['messages']} —Å–æ–æ–±—â\\., üìé {item['files']} —Ñ–∞–π–ª–æ–≤\n"
        
            if len(user_files) > 50:
                result += f"\n_\\.\\.\\.–∏ –µ—â–µ {len(user_files) - 50} –∏—Å—Ç–æ—Ä–∏–π_"
        
            result += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            result += "`save [ID]` \\- —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é\n"
            result += "`load [ID]` \\- –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        
            return True, result
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏–π: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}"

        
    def _get_user_history(self, user_id: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.chat_histories:
            self.chat_histories[user_id] = []
        return self.chat_histories[user_id]
        
    def _get_user_files(self, user_id: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_file_contexts:
            self.user_file_contexts[user_id] = []
        return self.user_file_contexts[user_id]
        
    def add_file_context(self, user_id: str, filename: str, content: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        file_context_config = self.config.get('file_context', {})
        multi_file_mode = file_context_config.get('multi_file_mode', 'merge')
        max_content_length = file_context_config.get('max_content_length', 200000)
        
        # –í —Ä–µ–∂–∏–º–µ "last" –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–∞–π–ª—ã
        if multi_file_mode == 'last':
            self.user_file_contexts[user_id] = []
            
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        truncated = False
        original_size = len(content)
        
        if len(content) > max_content_length:
            content = content[:max_content_length]
            truncated = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in self.user_file_contexts:
            self.user_file_contexts[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        self.user_file_contexts[user_id].append({
            'filename': filename,
            'content': content,
            'original_size': original_size,
            'truncated': truncated,
            'added_at': datetime.now().isoformat()
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        files_list = self.user_file_contexts[user_id]
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        total_size = sum(len(f['content']) for f in files_list)
        total_original_size = sum(f['original_size'] for f in files_list)
        
        return {
            'files_count': len(files_list),
            'total_size': total_size,
            'total_original_size': total_original_size,
            'mode': multi_file_mode,
            'truncated': truncated,
            'last_file': filename
        }
       
    async def handle_document(self, message: types.Message, state: FSMContext, agent_handler):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞"""
        user_id = str(message.from_user.id)
    
        if not message.document:
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        file_config = self.config.get('file_context', {})
        if not file_config.get('enabled', True):
            await message.reply(
                "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        from config import Config
        if not Config.is_text_file(message.document.file_name):
            await message.reply(
                "‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\\.\n"
                "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤:\n"
                "1\\. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —á–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /agent\\_stop\n"
                "2\\. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        max_file_size = file_config.get('max_content_length', 200000)
        if message.document.file_size > max_file_size:
            size_mb = max_file_size / (1024 * 1024)
            await message.reply(
                f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\\.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {escape_markdown_v2(f'{size_mb:.1f}')} –ú–ë\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /agent\\_stop –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞",
                parse_mode="MarkdownV2"
            )
            return
    
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        processing_msg = await message.reply(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –¥–ª—è —á–∞—Ç–∞\\.\\.\\.", parse_mode="MarkdownV2")
    
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file = await agent_handler.bot.get_file(message.document.file_id)
            file_data = await agent_handler.bot.download_file(file.file_path)
        
            if hasattr(file_data, 'getvalue'):
                file_bytes = file_data.getvalue()
            else:
                file_bytes = file_data
        
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                content = file_bytes.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    content = file_bytes.decode('cp1251')
                except:
                    content = file_bytes.decode('latin-1')
        
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            file_info = self.add_file_context(user_id, message.document.file_name, content)       
        
            await processing_msg.delete()
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._send_file_loaded_message(message, file_info, max_file_size)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {escape_markdown_v2(str(e))}", parse_mode="MarkdownV2")
   
    async def _send_file_loaded_message(self, message: types.Message, file_info: Dict, max_file_size: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞"""
        if file_info['mode'] == 'merge':
            if file_info['files_count'] > 1:
                info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\.\n"
                info_msg += f"üìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: *{file_info['files_count']}*\n"
            
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
                if file_info['total_size'] >= 1024*1024:
                    size_mb = file_info['total_size']/(1024*1024)
                    size_str = f"{size_mb:.1f} –ú–ë"
                elif file_info['total_size'] >= 1024:
                    size_kb = file_info['total_size']/1024
                    size_str = f"{size_kb:.1f} –ö–ë"
                else:
                    size_str = f"{file_info['total_size']} –±–∞–π—Ç"
            
                info_msg += f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: *{escape_markdown_v2(size_str)}*"
            
                if file_info['total_size'] < file_info['total_original_size']:
                    original_mb = file_info['total_original_size'] / (1024*1024)
                    info_msg += f"\n‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ —Å {escape_markdown_v2(f'{original_mb:.1f}')} –ú–ë –¥–æ –ª–∏–º–∏—Ç–∞ –∞–≥–µ–Ω—Ç–∞"
            
                info_msg += "\n\nüí¨ *–†–µ–∂–∏–º:* –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
                info_msg += "\nüìÑ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò"
            else:
                info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\."
                if file_info['truncated']:
                    info_msg += f"\n‚ö†Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {escape_markdown_v2(str(max_file_size))} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑\\-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞\\."
        else:  # mode == 'last'
            info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –∑–∞–º–µ–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\\."
            info_msg += "\n\nüí¨ *–†–µ–∂–∏–º:* –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª"
            if file_info['truncated']:
                info_msg += f"\n‚ö†Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {escape_markdown_v2(str(max_file_size))} —Å–∏–º–≤–æ–ª–æ–≤\\."
    
        info_msg += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞\\(–æ–≤\\)\\."
        info_msg += "\n\nüí° _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /agent\\_stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤_"
    
        await message.reply(info_msg, parse_mode="MarkdownV2")

    def get_merged_file_context(self, user_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        if user_id not in self.user_file_contexts:
            return None
            
        files_list = self.user_file_contexts[user_id]
        
        if not files_list:
            return None
            
        file_context_config = self.config.get('file_context', {})
        
        if file_context_config.get('multi_file_mode', 'merge') == 'last':
            # –í —Ä–µ–∂–∏–º–µ "last" –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
            if files_list:
                file_info = files_list[-1]
                return {
                    'filename': file_info['filename'],
                    'content': file_info['content'],
                    'files_count': 1,
                    'total_size': len(file_info['content']),
                    'original_size': file_info['original_size'],
                    'truncated': file_info['truncated']
                }
        else:
            # –í —Ä–µ–∂–∏–º–µ "merge" –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            separator = file_context_config.get( 'merge_separator', "\n\n<file name='{filename}'>\n\n```{extension}\n")
            suffix = file_context_config.get('merge_suffix', "\n\n```\n\n</file>\n\n")
            max_length = file_context_config.get('max_content_length', 200000)
            
            merged_parts = []
            total_original_size = 0
            any_truncated = False
            
            for file_info in files_list:
                filename = file_info['filename']
                extension = os.path.splitext(filename)[1][1:] if '.' in filename else ''
                file_header = separator.format(filename=filename, extension=extension)
                merged_parts.append(file_header + file_info['content'] + suffix)
                total_original_size += file_info['original_size']
                if file_info['truncated']:
                    any_truncated = True
                    
            merged_content = ''.join(merged_parts)
            
            # –û–±—Ä–µ–∑–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            merged_truncated = False
            if len(merged_content) > max_length:
                merged_content = merged_content[:max_length]
                merged_truncated = True
                
            filenames = [f['filename'] for f in files_list]
            
            return {
                'filename': ', '.join(filenames),  # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                'content': merged_content,
                'files_count': len(files_list),
                'total_size': len(merged_content),
                'original_size': total_original_size,
                'truncated': any_truncated or merged_truncated,
                'filenames_list': filenames
            }
            
    def _add_to_history(self, user_id: str, role: str, content: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        history_config = self.config.get('history', {})
        
        if not history_config.get('enabled', True):
            logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            return
        
        if user_id not in self.chat_histories:
            self.chat_histories[user_id] = []
        
        self.chat_histories[user_id].append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
        max_messages = history_config.get('max_messages', 20)
        if len(self.chat_histories[user_id]) > max_messages:
            self.chat_histories[user_id] = self.chat_histories[user_id][-max_messages:]
            
    def _clear_history(self, user_id: str):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)"""
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if user_id in self.chat_histories:
            self.chat_histories[user_id] = []
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
        history_config = self.config.get('history', {})
        if history_config.get('clear_files_on_history_clear', True):
            if user_id in self.user_file_contexts:
                files_count = len(self.user_file_contexts[user_id])
                self.user_file_contexts[user_id] = []
                if files_count > 0:
                    logger.info(f"–û—á–∏—â–µ–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
    def _format_history_for_ai(self, user_id: str) -> List[Dict[str, str]]:
        history = self._get_user_history(user_id)
        history_config = self.config.get('history', {})
        
        formatted = []
        for msg in history:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏—Ö –≤–∫–ª—é—á–µ–Ω–∏–µ
            if msg['role'] == 'system' and not history_config.get('include_system', False):
                continue
            
            formatted.append({
                "role": msg['role'],
                "content": msg['content']
            })
        
        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ò–ò –∏–∑ {len(history)} –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        return formatted
        
    def _check_context_change(self, user_id: str, new_context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        last_file_content = new_context.get('last_file_content')
        
        history = self._get_user_history(user_id)
        
        # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        for msg in reversed(history):
            if 'metadata' in msg:
                old_filenames = msg.get('metadata', {}).get('filenames', [])
                
                if last_file_content:
                    new_filenames = last_file_content.get('filenames_list', [last_file_content.get('filename')])
                    return old_filenames != new_filenames
                else:
                    # –ë—ã–ª–∏ —Ñ–∞–π–ª—ã, —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç
                    return True
        
        # –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã - —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        if last_file_content:
            return True
        
        return False
        
    async def process(
        self,
        user_id: str,
        query: str,
        context: Dict[str, Any]
    ) -> Tuple[bool, str]:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π
        if query.lower().startswith('save '):
            chat_id = query[5:].strip()
            if not chat_id:
                return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: `save [ID]`"
            if not chat_id.replace('_', '').replace('-', '').isalnum():
                return False, "‚ùå ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, \\_ –∏ \\-"
            return self._save_chat_history(user_id, chat_id)
    
        elif query.lower().startswith('load '):
            chat_id = query[5:].strip()
            if not chat_id:
                return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: `load [ID]`"
            return self._load_chat_history(user_id, chat_id)
    
        elif query.lower().startswith('delete '):
            chat_id = query[7:].strip()
            if not chat_id:
                return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: `delete [ID]`"
            return self._delete_chat_history(user_id, chat_id)
    
        elif query.lower().startswith('rename '):
            parts = query[7:].strip().split()
            if len(parts) != 2:
                return False, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `rename [—Å—Ç–∞—Ä—ã–π_ID] [–Ω–æ–≤—ã–π_ID]`"
            return self._rename_chat_history(user_id, parts[0], parts[1])
    
        elif query.lower() == 'list':
            return self._list_saved_histories(user_id)
    
        elif query.lower() == 'help':
            help_text = info_cmd_chat_message()
            help_text += "\n" + info_chat_help_message()

            return True, help_text
        
        # –î–∞–ª–µ–µ –∏–¥–µ—Ç –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        try:
            ai_interface = context.get('ai_interface')
            user_manager = context.get('user_manager')
            
            if not ai_interface:
                return False, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
                
            ai_settings = self.config.get('ai_settings', {})
            ai_provider = ai_settings.get('provider', 'default')
            ai_model = ai_settings.get('model', 'default')
            
            if ai_provider == 'default':
                if ai_interface.has_api_key('openai'):
                    ai_provider = 'openai'
                elif ai_interface.has_api_key('anthropic'):
                    ai_provider = 'anthropic'
                else:
                    return False, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"
                    
            history_config = self.config.get('history', {})
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–æ–≤
            if history_config.get('clear_on_context_change', False):
                if self._check_context_change(user_id, context):
                    self._clear_history(user_id)
                    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
            system_prompt = self.config.get('system_prompt', '')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            merged_context = self.get_merged_file_context(user_id)

            if merged_context:
                system_prompt += merged_context['content']
                logger.info(f"Chat –∞–≥–µ–Ω—Ç: –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç {merged_context['files_count']} —Ñ–∞–π–ª(–æ–≤), –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä {merged_context['total_size']} —Å–∏–º–≤–æ–ª–æ–≤")
                
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ messages –¥–ª—è –ò–ò
            messages = []
            
            if system_prompt:
                messages.append({"role": "system", "content": system_prompt})
            
            # –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if history_config.get('enabled', True):
                history_messages = self._format_history_for_ai(user_id)
                logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º {len(history_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–º–ø—Ç")
                messages.extend(history_messages)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
            messages.append({"role": "user", "content": query})
            
            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º user –≤ –∏—Å—Ç–æ—Ä–∏—é –ü–û–°–õ–ï —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            self._add_to_history(user_id, "user", query)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫ –ò–ò: user_id={user_id}, –ø—Ä–æ–≤–∞–π–¥–µ—Ä={ai_provider}, –º–æ–¥–µ–ª—å={ai_model}, —Å–æ–æ–±—â–µ–Ω–∏–π={len(messages)}")
                       
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            ai_params = {}            
            if ai_provider == "openai":
                ai_params["max_completion_tokens"] = ai_settings.get("max_completion_tokens", ai_settings.get("max_tokens", None))
                ai_params["temperature"] = ai_settings.get('temperature', 1.0)
            else:
                ai_params["max_tokens"] = ai_settings.get("max_tokens", ai_settings.get("max_completion_tokens", None))
                ai_params["temperature"] = ai_settings.get('temperature', 1.0)
                
            response = await ai_interface.send_request(
                user_id=user_id,
                provider=ai_provider,
                messages=messages,
                model=ai_model if ai_model != 'default' else None,
                **ai_params
            )
            
            if not response:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"
            
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º assistant –≤ –∏—Å—Ç–æ—Ä–∏—é –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            self._add_to_history(user_id, "assistant", response)
            
            result = escape_markdown_v2(response)           
                    
            if history_config.get('enabled', True) and history_config.get('show_history_info', False):
                history_len = len(self._get_user_history(user_id))
                result += f"\n\nüìú *–ò—Å—Ç–æ—Ä–∏—è:* {history_len}/{history_config.get('max_messages', 20)} —Å–æ–æ–±—â–µ–Ω–∏–π"
                
            return True, result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Chat –∞–≥–µ–Ω—Ç–µ: {e}", exc_info=True)
            return False, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {escape_markdown_v2(str(e))}"
            
    def get_config(self) -> Dict[str, Any]:
        return self.config.copy()
        
    def set_config(self, config: Dict[str, Any]):
        config['owner_id'] = self.config.get('owner_id', 'system')
        config['access'] = self.config.get('access', 'public')
        config['type'] = 'chat'
        
        self.config = config
        
        if not config.get('history', {}).get('enabled', True):
            self.chat_histories.clear()
            logger.info("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
    def clear_user_history(self, user_id: str) -> bool:
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª–æ–≤"""
        history_cleared = False
        
        if user_id in self.chat_histories:
            self.chat_histories[user_id] = []
            history_cleared = True
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        history_config = self.config.get('history', {})
        if history_config.get('clear_files_on_history_clear', True):
            if user_id in self.user_file_contexts:
                self.user_file_contexts[user_id] = []
        
        return history_cleared
        
    def clear_user_files(self, user_id: str) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_file_contexts:
            return 0
        
        files_count = len(self.user_file_contexts[user_id])
        self.user_file_contexts[user_id] = []
        return files_count
        
    def get_user_history(self, user_id: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._get_user_history(user_id).copy()
        
    def get_user_files_info(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        files_list = self._get_user_files(user_id)
        
        return {
            'files_count': len(files_list),
            'files': [{'filename': f['filename'], 'size': f['original_size']} for f in files_list],
            'total_size': sum(f['original_size'] for f in files_list),
            'mode': self.config.get('file_context', {}).get('multi_file_mode', 'merge')
        }
        
    def export_history(self, user_id: str) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        history = self._get_user_history(user_id)
        files_info = self.get_user_files_info(user_id)
        
        if not history:
            return "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
            
        export_lines = ["# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if files_info['files_count'] > 0:
            export_lines.append("## –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n")
            for file in files_info['files']:
                export_lines.append(f"- {file['filename']} ({file['size']} –±–∞–π—Ç)")
            export_lines.append("\n---\n")
            
        for msg in history:
            timestamp = msg.get('timestamp', '')
            role = msg['role']
            content = msg['content']
            
            if role == 'user':
                export_lines.append(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** ({timestamp}):")
            elif role == 'assistant':
                export_lines.append(f"**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç** ({timestamp}):")
            elif role == 'system':
                export_lines.append(f"**–°–∏—Å—Ç–µ–º–∞** ({timestamp}):")
                
            export_lines.append(f"{content}\n")
            
        return "\n".join(export_lines)
# code/handlers/public_access_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—É–±–ª–∏—á–Ω—ã–º –±–∞–∑–∞–º
"""

import logging
from aiogram import types
from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)


class PublicAccessHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—É–±–ª–∏—á–Ω—ã–º –±–∞–∑–∞–º"""
    
    def __init__(self, bot, user_manager, codebase_manager):
        self.bot = bot
        self.user_manager = user_manager
        self.codebase_manager = codebase_manager
    
    async def cmd_public_add_user(self, message: types.Message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
        
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await self.cmd_public_add_user_help(message)
            return
        
        target_user_id = parts[1].strip()
        
        if not target_user_id.isdigit():
            text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\\."
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
        
        if cb_info.get("is_public_ref"):
            text = (
                "‚ùå *–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –±–∞–∑—ã\\!*\n\n"
                "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º\\.\n"
                "–≠—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–º –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        if not config:
            await message.reply("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="MarkdownV2")
            return
        
        if config.get("owner_id") and config["owner_id"] != user_id:
            text = "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –±–∞–∑—ã"
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        if config.get("is_system") or config.get("folder_name") == "devnull":
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ", parse_mode="MarkdownV2")
            return
        
        if not config.get("is_public"):
            name_escaped = escape_markdown_v2(config['name'])
            text = (
                f"‚ùå –ë–∞–∑–∞ '{name_escaped}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π\\.\n"
                f"–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –µ—ë –ø—É–±–ª–∏—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π /make\\_public"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        target_user = await self.user_manager.get_user(target_user_id)
        if not target_user:
            text = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{target_user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω\\.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        if target_user_id == user_id:
            await message.reply("‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –±–∞–∑—ã", parse_mode="MarkdownV2")
            return
        
        public_id = config.get("public_id")
        success, msg = await self.codebase_manager.add_public_codebase(target_user_id, public_id)
        
        if success:
            target_name = f"{target_user.get('name', '')} {target_user.get('surname', '')}".strip()
            target_telegram = target_user.get('telegram_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            response = (
                f"‚úÖ *–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\\!*\n\n"
                f"üìÇ *–ë–∞–∑–∞:* {escape_markdown_v2(config['name'])}\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escape_markdown_v2(target_name)}\n"
                f"üÜî *Telegram ID:* `{target_user_id}`\n"
                f"üí¨ *Username:* {escape_markdown_v2(target_telegram)}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å:\n"
                f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –±–∞–∑—É —á–µ—Ä–µ–∑ /switch\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤\n\n"
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –º–æ–∂–µ—Ç:\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã\n"
                f"‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é\n"
                f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –¥—Ä—É–≥–∏—Ö"
            )
            
            await message.reply(response, parse_mode="MarkdownV2")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if target_user.get('active', False):
                try:
                    owner_user = await self.user_manager.get_user(user_id)
                    owner_name = f"{owner_user.get('name', '')} {owner_user.get('surname', '')}".strip() if owner_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    notification = (
                        f"üéâ *–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø\\!*\n\n"
                        f"üìÇ –ë–∞–∑–∞: {escape_markdown_v2(config['name'])}\n"
                        f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {escape_markdown_v2(owner_name)}\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã\\."
                    )
                    await self.bot.send_message(target_user_id, notification, parse_mode="MarkdownV2")
                except:
                    pass
        else:
            if msg == "–ë–∞–∑–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞":
                text = f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –±–∞–∑–µ"
            else:
                text = f"‚ùå {escape_markdown_v2(msg)}"
            await message.reply(text, parse_mode="MarkdownV2")
    
    async def cmd_public_add_user_help(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ public_add_user"""
        text = (
            f"üìö *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑–µ*\n\n"
            f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n"
            f"`/public_add_user <telegram_id>`\n\n"
            f"*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n"
            f"‚Ä¢ –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–∞–∑—ã\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π\n\n"
            f"*–ü—Ä–∏–º–µ—Ä:*\n"
            f"`/public_add_user 123456789`\n\n"
            f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            f"/public\\_list\\_users \\- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
            f"/public\\_remove\\_user \\- —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        await message.reply(text, parse_mode="MarkdownV2")
    
    async def cmd_public_remove_user(self, message: types.Message):
        """–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑–µ"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
        
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            text = (
                f"üìö *–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n"
                f"`/public_remove_user <telegram_id>`\n\n"
                f"*–ü—Ä–∏–º–µ—Ä:*\n"
                f"`/public_remove_user 123456789`"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        target_user_id = parts[1].strip()
        
        if not target_user_id.isdigit():
            await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID", parse_mode="MarkdownV2")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã", parse_mode="MarkdownV2")
            return
        
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
        
        if cb_info.get("is_public_ref"):
            text = "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ"
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        if not config or not config.get("is_public"):
            await message.reply("‚ùå –ë–∞–∑–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π", parse_mode="MarkdownV2")
            return
        
        public_id = config.get("public_id")
        virtual_id = f"pub_{public_id}"
        
        success = await self.codebase_manager.remove_public_codebase(target_user_id, virtual_id)
        
        if success:
            text = (
                f"‚úÖ –î–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω\\!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_user_id}` –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø\\. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–ª –¥–æ—Å—Ç—É–ø–∞\\."
            await message.reply(text, parse_mode="MarkdownV2")
    
    async def cmd_public_list_users(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑–µ"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        parts = message.text.split('_')
        page = 1
        if len(parts) > 3 and parts[-1].isdigit():
            page = int(parts[-1])
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã", parse_mode="MarkdownV2")
            return
        
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
        
        if cb_info.get("is_public_ref"):
            text = "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º"
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        if not config or not config.get("is_public"):
            await message.reply("‚ùå –ë–∞–∑–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π", parse_mode="MarkdownV2")
            return
        
        public_id = config.get("public_id")
        users_with_access = await self.codebase_manager.get_public_codebase_users(public_id)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        items_per_page = 10
        total_users = len(users_with_access)
        total_pages = max(1, (total_users + items_per_page - 1) // items_per_page)
        
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages
        
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, total_users)
        
        base_name = escape_markdown_v2(config['name'])
        text = f"üë• *–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ '{base_name}'*\n"
        text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        
        if users_with_access:
            for user_info in users_with_access[start_idx:end_idx]:
                user_data = await self.user_manager.get_user(user_info['user_id'])
                if user_data:
                    name = f"{user_data.get('name', '')} {user_data.get('surname', '')}".strip()
                    telegram = user_data.get('telegram_username', '')
                    
                    text += f"üÜî `{user_info['user_id']}` "
                    text += f"{escape_markdown_v2(name)}"
                    
                    if telegram and telegram != '–ù–µ —É–∫–∞–∑–∞–Ω':
                        text += f" {escape_markdown_v2(telegram)}"
                    
                    text += "\n"
        else:
            text += "_–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω_\n"
        
        text += "\n"
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if total_pages > 1:
            text += "üîÑ "
            if page > 1:
                text += f"/public\\_list\\_users\\_{page-1} ‚óÄÔ∏è "
            text += f"{page}/{total_pages}"
            if page < total_pages:
                text += f" ‚ñ∂Ô∏è /public\\_list\\_users\\_{page+1}"
            text += "\n\n"
        
        text += (
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            f"`/public_add_user <id>` \\- –¥–æ–±–∞–≤–∏—Ç—å\n"
            f"`/public_remove_user <id>` \\- —É–¥–∞–ª–∏—Ç—å"
        )
        
        await message.reply(text, parse_mode="MarkdownV2")
# code/handlers/codebase_handler.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–¥–æ–≤—ã–º–∏ –±–∞–∑–∞–º–∏
"""

import os
import re
import json
import logging
from datetime import datetime
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from agents.rag_singleton import get_rag_manager
from utils.markdown_utils import escape_markdown_v2

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from handlers.public_access_handler import PublicAccessHandler
from handlers.codebase_visibility_handler import CodebaseVisibilityHandler, VisibilityStates
from handlers.rag_index_handler import RagIndexHandler
from handlers.codebase_crud_handler import CodebaseCrudHandler, CodebaseCrudStates


logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑
class CodebaseStates(StatesGroup):
# –û—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    edit_selection = State()
    edit_field = State()
    share_users = State()
    #create_name = State()
    #create_description = State()
    #confirm_public = State()
    #confirm_hide = State()

class CodebaseHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–¥–æ–≤—ã–º–∏ –±–∞–∑–∞–º–∏"""
    
    def __init__(self, bot, user_manager, codebase_manager, file_manager):
        self.bot = bot
        self.user_manager = user_manager
        self.codebase_manager = codebase_manager
        self.file_manager = file_manager
        self.rag_manager = get_rag_manager()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.public_access_handler = PublicAccessHandler(bot, user_manager, codebase_manager)
        self.visibility_handler = CodebaseVisibilityHandler(bot, user_manager, codebase_manager, file_manager)
        self.rag_handler = RagIndexHandler(bot, user_manager, codebase_manager, self.rag_manager)
        self.crud_handler = CodebaseCrudHandler(bot, user_manager, codebase_manager)
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑ (–æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∞—Å—Å–µ)
        dp.message.register(self.cmd_codebases_page, F.text.regexp(r"^/codebases_(\d+)$"))
        dp.message.register(self.cmd_select_cb, F.text.regexp(r"^/select_cb_(.+)$"))
        dp.message.register(self.cmd_codebases, F.text == "/codebases")
        dp.message.register(self.cmd_active_codebase, F.text == "/active")
        dp.message.register(self.cmd_switch, F.text == "/switch")
    
        # CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
        dp.message.register(self.crud_handler.cmd_create_codebase, F.text == "/create_codebase")
        dp.message.register(self.crud_handler.process_codebase_name, CodebaseCrudStates.create_name)
        dp.message.register(self.crud_handler.process_codebase_description, CodebaseCrudStates.create_description)
    
        # –í–∏–¥–∏–º–æ—Å—Ç—å
        dp.message.register(self.visibility_handler.cmd_make_public, F.text == "/make_public")
        dp.message.register(self.visibility_handler.cmd_hide_codebase, F.text == "/hide_codebase")
        dp.message.register(self.visibility_handler.process_public_confirm, VisibilityStates.confirm_public)
        dp.message.register(self.visibility_handler.process_hide_confirm, VisibilityStates.confirm_hide)
    
        # RAG
        dp.message.register(self.rag_handler.cmd_index_rag, F.text == "/index_rag")
    
        # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
        dp.message.register(self.public_access_handler.cmd_public_add_user, F.text.regexp(r"^/public_add_user\s+\d+"))
        dp.message.register(self.public_access_handler.cmd_public_add_user_help, F.text == "/public_add_user")
        dp.message.register(self.public_access_handler.cmd_public_remove_user, F.text.regexp(r"^/public_remove_user\s+\d+"))
        dp.message.register(self.public_access_handler.cmd_public_list_users, F.text == "/public_list_users")
        dp.message.register(self.public_access_handler.cmd_public_list_users, F.text.regexp(r"^/public_list_users_\d+$"))
    
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(
            self.handle_codebase_callback,
            F.data.startswith("select_cb:")
        )
    
    async def cmd_codebases_page(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        m = re.match(r"^/codebases_(\d+)$", message.text)
        if not m:
            return
        page = int(m.group(1))
        await self.cmd_codebases(message, page)
    
    async def cmd_select_cb(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã"""
        m = re.match(r"^/select_cb_(.+)$", message.text)
        if not m:
            return
        codebase_id = m.group(1)
        await self.select_codebase(message, codebase_id)
    
    def _get_help_text_escaped(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è MarkdownV2"""
        text = ""
        text += "*üìå –ö–æ–º–∞–Ω–¥—ã:*\n"
        text += "/codebases \\- —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑\n"
        text += "/create\\_codebase \\- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
        text += "/active \\- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é\n"
        text += "/switch \\- –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ\n"
        text += "/make\\_public \\- —Å–¥–µ–ª–∞—Ç—å –±–∞–∑—É –ø—É–±–ª–∏—á–Ω–æ–π\n"
        text += "/hide\\_codebase \\- —Å–∫—Ä—ã—Ç—å –±–∞–∑—É \\(–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\)\n"
        text += "/index\\_rag \\- –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–∑—É –¥–ª—è RAG\n\n"
    
        text += "*üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º \\(–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤\\):*\n"
        text += "/public\\_list\\_users \\- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
        text += "/public\\_add\\_user \\- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "/public\\_remove\\_user \\- —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n"

        text += "*üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏:*\n"
        text += "/files \\- –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n"
        text += "/search \\- –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏\n"
        text += "/download \\- —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        text += "/delete \\- —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
    
        return text

    async def cmd_codebases(self, message: types.Message, page: int = 1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        user_id = str(message.from_user.id)
    
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
    
        if not user_codebases["codebases"]:
            text = (
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑\\.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /create\\_codebase"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - 5 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        items_per_page = 5
        total_items = len(user_codebases["codebases"])
        total_pages = (total_items + items_per_page - 1) // items_per_page
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages
    
        start_idx = (page - 1) * items_per_page
        end_idx = min(start_idx + items_per_page, total_items)
    
        text = f"üìö *–í–∞—à–∏ –∫–æ–¥–æ–≤—ã–µ –±–∞–∑—ã \\(—Å—Ç—Ä\\. {escape_markdown_v2(str(page))}/{escape_markdown_v2(str(total_pages))}\\):*\n\n"
    
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sorted_codebases = sorted(
            user_codebases["codebases"].items(),
            key=lambda x: x[1].get("number", 0)
        )
    
        for idx, (cb_id, cb_info) in enumerate(sorted_codebases[start_idx:end_idx], start_idx + 1):
            config = await self.codebase_manager.get_codebase_config(user_id, cb_id)
            if config:
                is_active = "‚úÖ" if user_codebases["active"] == cb_id else "  "
            
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∏–∫–æ–Ω–∫—É
                if cb_info.get("is_public_ref"):
                    # –≠—Ç–æ —á—É–∂–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞
                    access_icon = "üì•"  # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã
                    name_prefix = "[–î–û–ë–ê–í–õ–ï–ù–ê] "
                else:
                    # –≠—Ç–æ —Å–≤–æ—è –±–∞–∑–∞
                    access_icon = {"private": "üîí", "public": "üåç", "shared": "üë•"}.get(
                        config["access"]["type"], "‚ùì"
                    )
                    name_prefix = ""
            
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                number = config.get("number", cb_id)
            
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                name_escaped = escape_markdown_v2(name_prefix + config['name'])
                number_escaped = escape_markdown_v2(str(number))
            
                text += f"{is_active} {number_escaped}\\. *{name_escaped}* {access_icon}\n"

                # –î–ª—è —Å–≤–æ–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if config.get("is_public") and config.get("public_id") and not cb_info.get("is_public_ref"):
                    text += f"    ‚îî üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /public\\_list\\_users\n"

                # –î–ª—è —á—É–∂–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if cb_info.get("is_public_ref"):
                    owner_id = cb_info.get("owner_id")
                    owner_data = await self.user_manager.get_user(owner_id)
                    if owner_data:
                        owner_name = f"{owner_data.get('name', '')} {owner_data.get('surname', '')}".strip()
                        text += f"    ‚îî üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {escape_markdown_v2(owner_name)}\n"

                if config.get("description"):
                    desc_preview = config['description'][:40] + "..." if len(config['description']) > 40 else config['description']
                    desc_escaped = escape_markdown_v2(desc_preview)
                    text += f"    ‚îî {desc_escaped}\n"
            
                # –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–æ–º–µ—Ä–æ–º
                cb_id_escaped = escape_markdown_v2(cb_id)
                text += f"    ‚îî –ö–æ–º–∞–Ω–¥–∞: /select\\_cb\\_{cb_id_escaped}\n"
            
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                files_count, _ = await self.codebase_manager.get_live_stats(user_id, cb_id)
                files_count_escaped = escape_markdown_v2(str(files_count))
                text += f"    ‚îî –§–∞–π–ª–æ–≤: {files_count_escaped}"
            
                # –î–ª—è —Å–≤–æ–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
                if config.get("is_public") and not cb_info.get("is_public_ref"):
                    users_with_access = await self.codebase_manager.get_public_codebase_users(config.get("public_id"))
                    users_count = len(users_with_access)
                    text += f" \\| –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {escape_markdown_v2(str(users_count))}"
            
                text += "\n\n"
    
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if total_pages > 1:
            text += "üîÑ *–°—Ç—Ä–∞–Ω–∏—Ü—ã:* "
            if page > 1:
                prev_page = escape_markdown_v2(str(page-1))
                text += f"/codebases\\_{prev_page} ‚óÄÔ∏è "
        
            page_escaped = escape_markdown_v2(str(page))
            total_escaped = escape_markdown_v2(str(total_pages))
            text += f"\\[{page_escaped}/{total_escaped}\\]"
        
            if page < total_pages:
                next_page = escape_markdown_v2(str(page+1))
                text += f" ‚ñ∂Ô∏è /codebases\\_{next_page}"
            text += "\n\n"
    
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
        text += self._get_help_text_escaped()
        text += "\n\nüí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /select\\_cb\\_X —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–∞–∑—É –∞–∫—Ç–∏–≤–Ω–æ–π"
    
        await message.reply(text, parse_mode="MarkdownV2")
 
    async def cmd_active_codebase(self, message: types.Message):
        user_id = str(message.from_user.id)
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ devnull –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∑
        await self.codebase_manager.ensure_devnull(user_id)
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
    
        # –¢–µ–ø–µ—Ä—å active –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ devnull)
        if not user_codebases["active"]:
            # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            text = (
                "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return

        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)

        # –ï—Å–ª–∏ —ç—Ç–æ devnull –∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –±–∞–∑—ã, –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
        if config and config.get("folder_name") == "devnull":
            non_devnull_count = sum(1 for cb_id, cb_info in user_codebases["codebases"].items() 
                                  if cb_info.get("folder_name") != "devnull")
        
            if non_devnull_count > 0:
                text = (
                    "üìÇ *–ê–∫—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: devnull \\(—Å–∏—Å—Ç–µ–º–Ω–∞—è\\)*\n\n"
                    "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –±–∞–∑–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–¥–æ–≤—ã–µ –±–∞–∑—ã\\!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /switch —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—á—É—é –±–∞–∑—É\\.\n"
                    "–ò–ª–∏ /codebases —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\\."
                )
                await message.reply(text, parse_mode="MarkdownV2")
                return

        if not config:
            await message.reply("–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\.", parse_mode="MarkdownV2")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã
        is_owner = not cb_info.get("is_public_ref", False)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ RAG
        rag_user_id, rag_codebase_id = self.codebase_manager.get_rag_params_for_codebase(user_id, codebase_id, cb_info)
    
        # –ü–æ–ª—É—á–∞–µ–º RAG —Å—Ç–∞—Ç—É—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        codebase_dir = self.codebase_manager._get_codebase_dir(rag_user_id, rag_codebase_id)
        files_dir = os.path.join(codebase_dir, "files")
        rag_status = await self.rag_manager.check_index_status(rag_user_id, rag_codebase_id, files_dir)
        rag_info = "‚úÖ –ê–∫—Ç—É–∞–ª–µ–Ω" if rag_status['exists'] and not rag_status.get('needs_update') else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤
        files_count, total_size = await self.codebase_manager.get_live_stats(user_id, codebase_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        owner_info = ""
        if not is_owner:
            owner_id = cb_info.get("owner_id")
            owner_data = await self.user_manager.get_user(owner_id)
            if owner_data:
                owner_name = f"{owner_data.get('name', '')} {owner_data.get('surname', '')}".strip()
                owner_telegram = owner_data.get('telegram_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
                owner_email = owner_data.get('email', '')
            
                owner_info = f"\nüë§ *–í–ª–∞–¥–µ–ª–µ—Ü:* {escape_markdown_v2(owner_name)}\n"
                owner_info += f"üí¨ *Telegram:* {escape_markdown_v2(owner_telegram)}\n"
            
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                if owner_data.get('email_verified', False) and owner_email:
                    owner_info += f"üìß *Email:* {escape_markdown_v2(owner_email)}\n"

        access_type = {"private": "üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è", "public": "üåç –ü—É–±–ª–∏—á–Ω–∞—è", "shared": "üë• –û–±—â–∞—è"}.get(
            config["access"]["type"], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        )

        ai_info = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        ai_settings = config.get("ai_settings", {})
        if ai_settings.get("provider") != "default":
            ai_info = f"{ai_settings['provider']}/{ai_settings.get('model', 'default')}"

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è MarkdownV2
        name = escape_markdown_v2(config['name'])
        description = escape_markdown_v2(config.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        folder_id = escape_markdown_v2(config['id'])
        access_escaped = escape_markdown_v2(access_type)
        rag_escaped = escape_markdown_v2(rag_info)
        ai_escaped = escape_markdown_v2(ai_info)
        created_date = escape_markdown_v2(config['created_at'][:10])
        files_count_escaped = escape_markdown_v2(str(files_count))
        size_formatted = escape_markdown_v2(self.file_manager.format_size(total_size))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∞–∑—ã
        if is_owner:
            header = "üìÇ *–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞ \\(–≤–ª–∞–¥–µ–ª–µ—Ü\\):*\n\n"
        else:
            header = "üì• *–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞ \\(–¥–æ–±–∞–≤–ª–µ–Ω–∞\\):*\n\n"

        text = (
            f"{header}"
            f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n"
            f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n"
            f"üìÅ *ID –±–∞–∑—ã:* {folder_id}\n"
            f"üîê *–î–æ—Å—Ç—É–ø:* {access_escaped}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        if owner_info:
            text += owner_info

        text += (
            f"üîç *RAG –∏–Ω–¥–µ–∫—Å:* {rag_escaped}\n"
            f"ü§ñ *AI:* {ai_escaped}\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"  ‚Ä¢ –§–∞–π–ª–æ–≤: {files_count_escaped}\n"
            f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {size_formatted}\n"
            f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {created_date}\n"
        )

        # –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
        if is_owner and config.get("is_public"):
            users_with_access = await self.codebase_manager.get_public_codebase_users(config.get("public_id"))
            users_count = len(users_with_access)
        
            text += (
                f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {escape_markdown_v2(str(users_count))}\n"
            )
    
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if not is_owner:
            text += (
                f"\n‚ö†Ô∏è *–í–∞—à–∏ –ø—Ä–∞–≤–∞:*\n"
                f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
                f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤\n"
                f"‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
                f"‚ùå –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
                f"‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º\n"
            )

        text += "\n" + self._get_help_text_escaped()
    
        await message.reply(text, parse_mode="MarkdownV2")

 
    async def cmd_switch(self, message: types.Message):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–¥–æ–≤—ã–º–∏ –±–∞–∑–∞–º–∏"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        
        if len(user_codebases["codebases"]) < 2:
            await message.reply(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –µ—â–µ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /create_codebase"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for cb_id, cb_info in user_codebases["codebases"].items():
            config = await self.codebase_manager.get_codebase_config(user_id, cb_id)
            if config:
                is_active = "‚úÖ " if user_codebases["active"] == cb_id else ""
                access_icon = {"private": "üîí", "public": "üåç", "shared": "üë•"}.get(
                    config["access"]["type"], "‚ùì"
                )
                
                button_text = f"{is_active}{config['name'][:20]} {access_icon}"
                # –°–æ–∑–¥–∞–µ–º callback data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                callback_data = f"select_cb:{cb_id[:50]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=button_text, callback_data=callback_data)
                ])
        
        await message.reply(
            "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
            reply_markup=keyboard
        )
    
    def cb_help_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        text = ""
        text += "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        text += "/codebases - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑\n"
        text += "/create_codebase - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
        text += "/active - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é\n"
        text += "/switch - –±—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ\n"
        text += "/make_public - —Å–¥–µ–ª–∞—Ç—å –±–∞–∑—É –ø—É–±–ª–∏—á–Ω–æ–π\n"
        text += "/hide_codebase - —Å–∫—Ä—ã—Ç—å –±–∞–∑—É (–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ)\n"
        text += "/index_rag - –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–∑—É –¥–ª—è RAG\n\n"
    
        text += "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤):\n"
        text += "/public_list_users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
        text += "/public_add_user - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "/public_remove_user - —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n"

        text += "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏:\n"
        text += "/files - –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n"
        text += "/search - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏\n"
        text += "/download - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        text += "/delete - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
        return text

    async def select_codebase(self, message: types.Message, codebase_id: str):
        """–î–µ–ª–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∞–∫—Ç–∏–≤–Ω–æ–π"""
        user_id = str(message.from_user.id)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
    
        if codebase_id not in user_codebases["codebases"]:
            text = (
                f"‚ùå –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ \\#{escape_markdown_v2(codebase_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /codebases –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ
        if user_codebases["active"] == codebase_id:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            name_escaped = escape_markdown_v2(config['name'])
            cb_id_escaped = escape_markdown_v2(codebase_id)
            text = f"‚ÑπÔ∏è –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ '{name_escaped}' \\(\\#{cb_id_escaped}\\) —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞\\."
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –î–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π
        success = await self.codebase_manager.set_active_codebase(user_id, codebase_id)
    
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
            owner_info = ""
            if codebase_id.startswith("pub_"):
                cb_info = user_codebases["codebases"].get(codebase_id)
                if cb_info and cb_info.get("is_public_ref"):
                    owner_id = cb_info["owner_id"]
                    owner_data = await self.user_manager.get_user(owner_id)
                    if owner_data:
                        owner_name = f"{owner_data.get('name', '')} {owner_data.get('surname', '')}".strip()
                        owner_telegram = owner_data.get('telegram_username', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        owner_email = owner_data.get('email', '')
                    
                        owner_info_text = f"\nüë§ *–í–ª–∞–¥–µ–ª–µ—Ü:* {escape_markdown_v2(owner_name)}\n"
                        owner_info_text += f"üí¨ *Telegram:* {escape_markdown_v2(owner_telegram)}\n"
                    
                        if owner_data.get('email_verified', False) and owner_email:
                            owner_info_text += f"üìß *Email:* {escape_markdown_v2(owner_email)}\n"
                    
                        owner_info = owner_info_text
        
            files_count, total_size = await self.codebase_manager.get_live_stats(user_id, codebase_id)
        
            access_type = {"private": "üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è", "public": "üåç –ü—É–±–ª–∏—á–Ω–∞—è", "shared": "üë• –û–±—â–∞—è"}.get(
                config["access"]["type"], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
        
            ai_info = "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            ai_settings = config.get("ai_settings", {})
            if ai_settings.get("provider") != "default":
                ai_info = f"{ai_settings['provider']}/{ai_settings.get('model', 'default')}"
        
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è MarkdownV2
            name_escaped = escape_markdown_v2(config['name'])
            desc_escaped = escape_markdown_v2(config.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            folder_escaped = escape_markdown_v2(config['id'])
            access_escaped = escape_markdown_v2(access_type)
            ai_escaped = escape_markdown_v2(ai_info)
            files_escaped = escape_markdown_v2(str(files_count))
            size_formatted = escape_markdown_v2(self.file_manager.format_size(total_size))
            date_escaped = escape_markdown_v2(config['created_at'][:10])
        
            text = (
                f"üìÇ *–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞:*\n\n"
                f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name_escaped}\n"
                f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {desc_escaped}\n"
                f"üìÅ *–ü–∞–ø–∫–∞:* {folder_escaped}\n"
                f"üîê *–î–æ—Å—Ç—É–ø:* {access_escaped}\n"
            )
        
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            if owner_info:
                text += owner_info
        
            text += (
                f"ü§ñ *AI:* {ai_escaped}\n"
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                f"  ‚Ä¢ –§–∞–π–ª–æ–≤: {files_escaped}\n"
                f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {size_formatted}\n"
                f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {date_escaped}\n"
            )
        
            text += "\n"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            help_lines = self.cb_help_info().split('\n')
            for line in help_lines:
                if line.startswith('/'):
                    text += line.replace('_', '\\_').replace('-', '\\-').replace('(', '\\(').replace(')', '\\)') + '\n'
                else:
                    text += escape_markdown_v2(line) + '\n'
        
            await message.reply(text, parse_mode="MarkdownV2")
        
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await self.user_manager.update_activity(user_id)
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.", parse_mode="MarkdownV2")
      
    async def handle_codebase_callback(self, callback: types.CallbackQuery, state: FSMContext = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        user_id = str(callback.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", show_alert=True)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        if callback.data.startswith("select_cb:"):
            codebase_id_part = callback.data[10:]
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π ID
            user_codebases = await self.codebase_manager.get_user_codebases(user_id)
            full_codebase_id = None
            
            for cb_id in user_codebases["codebases"].keys():
                if cb_id.startswith(codebase_id_part) or codebase_id_part in cb_id:
                    full_codebase_id = cb_id
                    break
            
            if full_codebase_id:
                success = await self.codebase_manager.set_active_codebase(user_id, full_codebase_id)
                if success:
                    config = await self.codebase_manager.get_codebase_config(user_id, full_codebase_id)
                    await callback.answer(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {config['name']}", show_alert=False)
                    
                    files_count, total_size = await self.codebase_manager.get_live_stats(user_id, full_codebase_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.edit_text(
                        f"‚úÖ –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ '{config['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {config.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"üìä –§–∞–π–ª–æ–≤: {files_count}\n"
                        f"üîê –î–æ—Å—Ç—É–ø: {config['access']['type']}\n\n"
                        f"{self.cb_help_info()}"
                    )
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
            else:
                await callback.answer("‚ùå –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    
# code/handlers/codebase_visibility_handler.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑
"""

import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)

class VisibilityStates(StatesGroup):
    confirm_public = State()
    confirm_hide = State()


class CodebaseVisibilityHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ–¥–æ–≤—ã—Ö –±–∞–∑"""
    
    def __init__(self, bot, user_manager, codebase_manager, file_manager):
        self.bot = bot
        self.user_manager = user_manager
        self.codebase_manager = codebase_manager
        self.file_manager = file_manager
    
    async def cmd_make_public(self, message: types.Message, state: FSMContext):
        """–°–¥–µ–ª–∞—Ç—å –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –ø—É–±–ª–∏—á–Ω–æ–π"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        codebase_id = user_codebases["active"]
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        if not config:
            await message.reply("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="MarkdownV2")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if config.get("is_system") or config.get("folder_name") == "devnull":
            await message.reply("‚ùå –°–∏—Å—Ç–µ–º–Ω—É—é –±–∞–∑—É devnull –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π", parse_mode="MarkdownV2")
            return
        
        if config.get("is_public"):
            name_escaped = escape_markdown_v2(config['name'])
            text = (
                f"‚ÑπÔ∏è –ë–∞–∑–∞ '{name_escaped}' —É–∂–µ –ø—É–±–ª–∏—á–Ω–∞—è\\!\n\n"
                f"*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º:*\n"
                f"/public\\_list\\_users \\- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
                f"/public\\_add\\_user `<telegram_id>` \\- –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"/public\\_remove\\_user `<telegram_id>` \\- —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n"
                f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∑–Ω–∞–π—Ç–µ –µ–≥–æ Telegram ID\\.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –∫–æ–º–∞–Ω–¥–æ–π /settings"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        if config.get("hidden"):
            await message.reply("‚ùå –°–∫—Ä—ã—Ç—É—é –±–∞–∑—É –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π", parse_mode="MarkdownV2")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            codebase_id=codebase_id,
            codebase_name=config['name'],
            action="make_public"
        )
        
        files_count, total_size = await self.codebase_manager.get_live_stats(user_id, codebase_id)
        
        name_escaped = escape_markdown_v2(config['name'])
        files_escaped = escape_markdown_v2(str(files_count))
        size_escaped = escape_markdown_v2(self.file_manager.format_size(total_size))
        
        text = (
            f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï\\! –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã*\n\n"
            f"üìÇ –ë–∞–∑–∞: {name_escaped}\n"
            f"üìä –§–∞–π–ª–æ–≤: {files_escaped}\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {size_escaped}\n\n"
            f"*–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:*\n"
            f"‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            f"‚úÖ –í–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º\n"
            f"‚úÖ –û—Ç–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
            f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã\n\n"
            f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º —Å–º–æ–≥—É—Ç:*\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            f"‚úÖ –ß–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG –∏–Ω–¥–µ–∫—Å –±–∞–∑—ã\n\n"
            f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï —Å–º–æ–≥—É—Ç:*\n"
            f"‚ùå –ò–∑–º–µ–Ω—è—Ç—å –∏–ª–∏ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã\n"
            f"‚ùå –°–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é\n"
            f"‚ùå –£–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø–æ–º –¥—Ä—É–≥–∏—Ö\n\n"
            f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
            f"‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û\n"
            f"‚Ä¢ –ë–∞–∑–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è\n"
            f"‚Ä¢ –í—ã –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        
        await message.reply(text, parse_mode="MarkdownV2")
        await state.set_state(VisibilityStates.confirm_public)
    
    async def process_public_confirm(self, message: types.Message, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∞–∑—ã"""
        user_id = str(message.from_user.id)
        
        if message.text != "–î–ê":
            await message.reply("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", parse_mode="MarkdownV2")
            await state.clear()
            return
        
        data = await state.get_data()
        codebase_id = data['codebase_id']
        codebase_name = data['codebase_name']
        
        public_id = await self.codebase_manager.make_public(user_id, codebase_id)
        
        if public_id:
            name_escaped = escape_markdown_v2(codebase_name)
            text = (
                f"‚úÖ *–ë–∞–∑–∞ '{name_escaped}' —Ç–µ–ø–µ—Ä—å –ø—É–±–ª–∏—á–Ω–∞—è\\!*\n\n"
                f"*–ß—Ç–æ –¥–∞–ª—å—à–µ:*\n\n"
                f"1Ô∏è‚É£ *–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
                f"   `/public_add_user <telegram_id>`\n\n"
                f"2Ô∏è‚É£ *–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–æ–º:*\n"
                f"   /public\\_list\\_users \\- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                f"   /public\\_remove\\_user \\- —É–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø\n\n"
                f"3Ô∏è‚É£ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∑–Ω–∞–µ—Ç —Å–≤–æ–π ID:*\n"
                f"   –û–Ω –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /settings\n"
                f"   –¢–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –µ–≥–æ Telegram ID\n\n"
                f"üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞\n"
                f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ /start,\n"
                f"–∑–∞—Ç–µ–º –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å–≤–æ–π Telegram ID\\.\n\n"
                f"‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\!"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            
            logger.info(f"User {user_id} made codebase {codebase_id} public with ID {public_id}")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–∞–∑—ã", parse_mode="MarkdownV2")
        
        await state.clear()
    
    async def cmd_hide_codebase(self, message: types.Message, state: FSMContext):
        """–°–∫—Ä—ã—Ç—å –∫–æ–¥–æ–≤—É—é –±–∞–∑—É"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
        
        codebase_id = user_codebases["active"]
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        if not config:
            await message.reply("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="MarkdownV2")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if config.get("is_system") or config.get("folder_name") == "devnull":
            await message.reply("‚ùå –°–∏—Å—Ç–µ–º–Ω—É—é –±–∞–∑—É devnull –Ω–µ–ª—å–∑—è —Å–∫—Ä—ã—Ç—å", parse_mode="MarkdownV2")
            return
        
        if config.get("hidden"):
            name_escaped = escape_markdown_v2(config['name'])
            await message.reply(f"‚ÑπÔ∏è –ë–∞–∑–∞ '{name_escaped}' —É–∂–µ —Å–∫—Ä—ã—Ç–∞", parse_mode="MarkdownV2")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            codebase_id=codebase_id,
            codebase_name=config['name'],
            is_public=config.get('is_public', False),
            public_id=config.get('public_id'),
            action="hide"
        )
        
        name_escaped = escape_markdown_v2(config['name'])
        warning_text = (
            f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï\\! –°–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\n\n"
            f"üìÇ –ë–∞–∑–∞: {name_escaped}\n"
        )
        
        if config.get('is_public'):
            public_id_escaped = escape_markdown_v2(str(config.get('public_id', '')))
            warning_text += (
                f"üîó –ü—É–±–ª–∏—á–Ω—ã–π ID: {public_id_escaped}\n\n"
                f"‚ö†Ô∏è –ë–∞–∑–∞ –ü–£–ë–õ–ò–ß–ù–ê–Ø\\!\n"
                f"–ü–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è:\n"
                f"‚ùå –ë–∞–∑–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞\n"
                f"‚ùå –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ—ë –≤—ã–±—Ä–∞—Ç—å\n"
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –°–û–•–†–ê–ù–Ø–¢ –µ–≥–æ\n"
                f"‚úÖ –ò—Ö –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã\n"
                f"‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û\n\n"
            )
        else:
            warning_text += (
                f"\n–ü–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è:\n"
                f"‚ùå –ë–∞–∑–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                f"‚ùå –ù–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é\n"
                f"‚ùå –§–∞–π–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ\n"
                f"‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û\n\n"
            )
        
        warning_text += "–í–≤–µ–¥–∏—Ç–µ '–°–ö–†–´–¢–¨' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        
        await message.reply(warning_text, parse_mode="MarkdownV2")
        await state.set_state(VisibilityStates.confirm_hide)
    
    async def process_hide_confirm(self, message: types.Message, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã"""
        user_id = str(message.from_user.id)
        
        if message.text != "–°–ö–†–´–¢–¨":
            await message.reply("‚ùå –°–∫—Ä—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", parse_mode="MarkdownV2")
            await state.clear()
            return
        
        data = await state.get_data()
        codebase_id = data['codebase_id']
        codebase_name = data['codebase_name']
        is_public = data.get('is_public', False)
        public_id = data.get('public_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏ —ç—Ç–æ –±–∞–∑–∞
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if user_codebases.get("active") == codebase_id:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ devnull
            await self.codebase_manager.ensure_devnull(user_id)
            await self.codebase_manager.set_active_codebase(user_id, "0")
        
        # –°–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É
        success = await self.codebase_manager.toggle_hidden(user_id, codebase_id, hidden=True)
        
        if success:
            name_escaped = escape_markdown_v2(codebase_name)
            msg = f"‚úÖ –ë–∞–∑–∞ '{name_escaped}' —Å–∫—Ä—ã—Ç–∞\\!\n\n"
            
            if is_public:
                msg += (
                    f"‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                    f"–ü—É–±–ª–∏—á–Ω—ã–π ID: `{public_id}`\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —ç—Ç–∏–º ID —Å–æ—Ö—Ä–∞–Ω—è—Ç –¥–æ—Å—Ç—É–ø\\!\n"
                    f"–ë–∞–∑–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–∏—Ö\\.\n\n"
                )
            
            msg += (
                f"–ë–∞–∑–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ\\.\n"
                f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –¥–∏—Å–∫–µ\\.\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\!"
            )
            
            await message.reply(msg, parse_mode="MarkdownV2")
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã", parse_mode="MarkdownV2")
        
        await state.clear()
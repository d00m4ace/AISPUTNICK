# code/handlers/file_operations/download_handler.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"""
import io
import re
import logging
from zipfile import ZipFile, ZIP_DEFLATED
from aiogram import types
from aiogram.fsm.context import FSMContext

from .states import FileStates
from .base import BaseFileHandler

from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)


class FileDownloadHandler(BaseFileHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    async def cmd_download_files(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        user_id = str(message.from_user.id)
    
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        if cb_info.get("is_public_ref"):
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            base_name = escape_markdown_v2(config['name']) if config else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–∞"
        
            text = (
                "‚ùå *–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\\!*\n\n"
                f"üìÇ –ë–∞–∑–∞: {base_name}\n"
                f"üîí –°—Ç–∞—Ç—É—Å: –ß—É–∂–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞\n\n"
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                "‚ùå –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n"
                "‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤\n"
                "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ /agents –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞\n"
                "‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ RAG\\-–∏–Ω–¥–µ–∫—Å\n"
                "‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤\n\n"
                "_–í–ª–∞–¥–µ–ª–µ—Ü –±–∞–∑—ã –∑–∞—â–∏—Ç–∏–ª –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º\\._"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        text = (
            "üì• –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\\.\n"
            "–ü—Ä–∏–º–µ—Ä: file1\\.txt, script\\.py\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ /files\n"
            "–ü—Ä–∏–º–µ—Ä: 1, 3, 5\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '\\*' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã\n"
            "‚ö†Ô∏è –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑\n\n"
            "/cancel\\_file\\_job \\- –æ—Ç–º–µ–Ω–∞"
        )
        await message.reply(text, parse_mode="MarkdownV2")
        await state.set_state(FileStates.selecting_files_to_download)
    
    async def process_files_to_download(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        user_id = str(message.from_user.id)
        text = message.text.strip()
    
        if text.lower() == "/cancel_file_job":
            await state.clear()
            await message.reply("‚ùå –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
    
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        cb_info = user_codebases["codebases"].get(codebase_id, {})
        if cb_info.get("is_public_ref"):
            await state.clear()
            text_reply = (
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.\n"
                "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —á—É–∂–æ–π –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ\\."
            )
            await message.reply(text_reply, parse_mode="MarkdownV2")
            return
    
        all_files_data = await self.file_manager.list_files(user_id, codebase_id, 1, per_page=10000)
        all_files = all_files_data['files']
    
        files_to_download = []
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏ - –≤—Å–µ —Ñ–∞–π–ª—ã
        if text == "*":
            total_count = len(all_files)
            if total_count == 0:
                await message.reply("‚ùå –í –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤\\.", parse_mode="MarkdownV2")
                await state.clear()
                return
        
            if total_count > 5:
                # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
                await self._send_files_as_zip(message, user_id, codebase_id, all_files)
                await state.clear()
                return
        
            files_to_download = [f['name'] for f in all_files][:10]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ –∏ –¥–µ—Ñ–∏—Å—ã (–Ω–æ–º–µ—Ä–∞)
            text_norm = text.replace(" ", "")
            if re.match(r'^[\d,\-\s]+$', text_norm):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤
                files_to_download = self._parse_file_indices(text_norm, all_files)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                files_to_download = self._parse_file_names(text, all_files)
    
        if not files_to_download:
            text_reply = (
                "‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
                "‚Ä¢ –ò–º—è —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ \\(–≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\\)\n"
                "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /files\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            await message.reply(text_reply, parse_mode="MarkdownV2")
            return
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        await self._send_files(message, user_id, codebase_id, files_to_download)
        await state.clear()
  
    def _parse_file_indices(self, text_norm: str, all_files: list) -> list:
        """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        parts = text_norm.split(",")
        indices = []
        
        for part in parts:
            if "-" in part:
                try:
                    start, end = map(int, part.split("-"))
                    if start > end:
                        start, end = end, start
                    indices.extend(range(start, end + 1))
                except ValueError:
                    continue
            else:
                try:
                    indices.append(int(part))
                except ValueError:
                    continue
        
        files_to_download = []
        for idx in indices[:10]:
            if 1 <= idx <= len(all_files):
                files_to_download.append(all_files[idx - 1]['name'])
        
        return files_to_download
    
    def _parse_file_names(self, text: str, all_files: list) -> list:
        """–ü–∞—Ä—Å–∏—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        requested_names = [name.strip() for name in text.split(",") if name.strip()]
        files_to_download = []
        
        for requested_name in requested_names[:10]:
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            found = False
            for f in all_files:
                if f['name'] == requested_name:
                    files_to_download.append(f['name'])
                    found = True
                    break
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
            if not found:
                for f in all_files:
                    if requested_name.lower() in f['name'].lower():
                        files_to_download.append(f['name'])
                        found = True
                        break
            
            if not found:
                logger.warning(f"–§–∞–π–ª '{requested_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return files_to_download

    async def _send_files(self, message: types.Message, user_id: str, codebase_id: str, filenames: list):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        sent = 0
        not_sent = []
    
        for filename in filenames:
            file_data = await self.file_manager.get_file(user_id, codebase_id, filename)
            if file_data:
                try:
                    caption_escaped = f"üìé {escape_markdown_v2(filename)}"
                    await message.reply_document(
                        types.BufferedInputFile(file_data, filename),
                        caption=caption_escaped,
                        parse_mode="MarkdownV2"
                    )
                    sent += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                    not_sent.append(filename)
    
        sent_escaped = escape_markdown_v2(str(sent))
        total_escaped = escape_markdown_v2(str(len(filenames)))
    
        result_msg = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_escaped}/{total_escaped}"
        if not_sent:
            result_msg += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            for f in not_sent:
                result_msg += f"‚Ä¢ {escape_markdown_v2(f)}\n"
        result_msg += "\n\n/files \\- —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
    
        await message.reply(result_msg, parse_mode="MarkdownV2")    
   
    async def _send_files_as_zip(self, message: types.Message, user_id: str, codebase_id: str, all_files: list):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –≤–∏–¥–µ ZIP –∞—Ä—Ö–∏–≤–∞"""
        buf = io.BytesIO()
        total_count = len(all_files)
    
        with ZipFile(buf, "w", ZIP_DEFLATED) as zf:
            for f in all_files:
                file_name = f['name']
                file_bytes = await self.file_manager.get_file(user_id, codebase_id, file_name)
                if file_bytes is None:
                    continue
                zf.writestr(file_name, file_bytes)
    
        buf.seek(0)
    
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        base_name = (config['name'] if config else f"codebase_{codebase_id}") or f"codebase_{codebase_id}"
        safe_base = re.sub(r'[^A-Za-z0-9_\-]+', '_', base_name).strip('_') or "codebase"
        zip_name = f"{safe_base}_all_{total_count}.zip"
    
        try:
            total_escaped = escape_markdown_v2(str(total_count))
            caption = f"üì¶ –ê—Ä—Ö–∏–≤ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã \\({total_escaped} —à—Ç\\.\\)"
        
            await message.reply_document(
                types.BufferedInputFile(buf.read(), zip_name),
                caption=caption,
                parse_mode="MarkdownV2"
            )
            await message.reply("‚úÖ –ì–æ—Ç–æ–≤–æ\\! /files ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", parse_mode="MarkdownV2")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ {zip_name}: {e}")
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø–æ —á–∞—Å—Ç—è–º\\."
            await message.reply(text, parse_mode="MarkdownV2")    
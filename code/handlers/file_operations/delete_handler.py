# code/handlers/file_operations/delete_handler.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"""
import os
import asyncio
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from agents.rag_singleton import get_rag_manager

from .states import FileStates
from .base import BaseFileHandler

from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)

class FileDeleteHandler(BaseFileHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""

    def __init__(self, bot, user_manager, codebase_manager, file_manager):
        super().__init__(bot, user_manager, codebase_manager, file_manager)
        self.rag_manager = get_rag_manager()
    
    async def cmd_delete_files(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        user_id = str(message.from_user.id)
    
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if cb_info.get("is_public_ref"):
            text = (
                "‚ùå *–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ —á—É–∂–æ–π –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑–µ\\!*\n\n"
                "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–∞–∑—ã –º–æ–∂–µ—Ç:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã\n"
                "‚Ä¢ –£–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã\n"
                "‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        text = (
            "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\\.\n"
            "–ü—Ä–∏–º–µ—Ä: file1\\.txt, script\\.py, data\\.json\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ /files\n"
            "–ü—Ä–∏–º–µ—Ä: 1, 3, 5\\-8\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '\\*' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã\n\n"
            "/cancel\\_file\\_job \\- –æ—Ç–º–µ–Ω–∞"
        )
        await message.reply(text, parse_mode="MarkdownV2")
        await state.set_state(FileStates.selecting_files_to_delete)
   
    async def process_files_to_delete(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = str(message.from_user.id)
        text = message.text.strip()
    
        if text.lower() == "/cancel_file_job":
            await state.clear()
            await message.reply("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if cb_info.get("is_public_ref"):
            await state.clear()
            text_reply = (
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\\.\n"
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ —á—É–∂–æ–π –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑–µ\\."
            )
            await message.reply(text_reply, parse_mode="MarkdownV2")
            return
    
        all_files_data = await self.file_manager.list_files(user_id, codebase_id, 1, per_page=10000)
        all_files = all_files_data['files']
    
        files_to_delete = []
        text_norm = text.replace(" ", "")
    
        if text_norm == "*":
            # –í—ã–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            files_to_delete = [f['name'] for f in all_files]
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ –∏ –¥–µ—Ñ–∏—Å—ã (–Ω–æ–º–µ—Ä–∞)
            if any(ch.isdigit() for ch in text_norm):
                parts = text_norm.split(",")
                indices = set()
                for part in parts:
                    if "-" in part:
                        try:
                            start, end = map(int, part.split("-"))
                            if start > end:
                                start, end = end, start
                            indices.update(range(start, end + 1))
                        except ValueError:
                            continue
                    else:
                        try:
                            indices.add(int(part))
                        except ValueError:
                            continue
            
                for idx in sorted(indices):
                    if 1 <= idx <= len(all_files):
                        files_to_delete.append(all_files[idx - 1]['name'])
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
                files_to_delete = [f.strip() for f in text.split(",") if f.strip()]
    
        if not files_to_delete:
            await message.reply("‚ùå –§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="MarkdownV2")
            return
    
        await state.update_data(files_to_delete=files_to_delete, codebase_id=codebase_id)
    
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete:yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="confirm_delete:no"),
        ]])
    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        files_list = "\n".join(f"‚Ä¢ {escape_markdown_v2(f)}" for f in files_to_delete[:10])
        if len(files_to_delete) > 10:
            files_list += f"\n\\.\\.\\. –∏ –µ—â–µ {escape_markdown_v2(str(len(files_to_delete) - 10))}"
    
        text_reply = (
            f"‚ö†Ô∏è –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Ñ–∞–π–ª—ã \\({escape_markdown_v2(str(len(files_to_delete)))}\\):\n"
            f"{files_list}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
        )
    
        await message.reply(text_reply, reply_markup=kb, parse_mode="MarkdownV2")
   
    async def handle_confirm_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        choice = callback.data.split(":", 1)[1]
        user_id = str(callback.from_user.id)
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        if cb_info.get("is_public_ref"):
            text = (
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞\\.\n"
                "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –ø—É–±–ª–∏—á–Ω–æ–π –±–∞–∑—ã\\."
            )
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
            await state.clear()
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
    
        if choice == "yes":
            data_state = await state.get_data()
            files_to_delete = data_state.get("files_to_delete", [])
            if not files_to_delete:
                await callback.answer("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç", show_alert=True)
                return
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
            text_files_to_delete = [f for f in files_to_delete if self.rag_manager._is_text_file(f)]     

            deleted, total = await self.file_manager.delete_files(
                user_id, codebase_id, files_to_delete
            )

            # –ï—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            if text_files_to_delete and deleted > 0:
                asyncio.create_task(self._update_rag_after_delete(user_id, codebase_id, text_files_to_delete))        
        
            text = (
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {escape_markdown_v2(str(deleted))}/{escape_markdown_v2(str(total))}\n\n"
                f"/files ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
            )
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
            await state.clear()
        else:
            await callback.message.edit_text("‚õî –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\\.", parse_mode="MarkdownV2")
            await state.clear()
    
        await callback.answer()

    async def _update_rag_after_delete(self, user_id: str, codebase_id: str, deleted_files: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RAG –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
            codebase_dir = self.codebase_manager._get_codebase_dir(user_id, codebase_id)
            files_dir = os.path.join(codebase_dir, "files")
        
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            success, msg = await self.rag_manager.update_incremental(
                user_id=user_id,
                codebase_id=codebase_id,
                files_dir=files_dir
            )
        
            if success:
                logger.info(f"RAG –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è {len(deleted_files)} —Ñ–∞–π–ª–æ–≤: {msg}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å RAG –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {msg}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RAG –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
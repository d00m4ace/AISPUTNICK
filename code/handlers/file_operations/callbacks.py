# code/handlers/file_operations/callbacks.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import asyncio
import os
from agents.rag_singleton import get_rag_manager

logger = logging.getLogger(__name__)

class CallbackProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, parent_handler):
        self.handler = parent_handler
        self.bot = parent_handler.bot
        self.user_manager = parent_handler.user_manager
        self.codebase_manager = parent_handler.codebase_manager
        self.file_manager = parent_handler.file_manager
        self.rag_manager = get_rag_manager()

    async def _update_rag_index_if_needed(self, user_id: str, codebase_id: str, filename: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RAG –∏–Ω–¥–µ–∫—Å–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
            if not self.rag_manager._is_text_file(filename):
                return
        
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
            codebase_dir = self.codebase_manager._get_codebase_dir(user_id, codebase_id)
            files_dir = os.path.join(codebase_dir, "files")
        
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            success, msg = await self.rag_manager.update_incremental(
                user_id=user_id,
                codebase_id=codebase_id,
                files_dir=files_dir
            )
        
            if success:
                logger.info(f"RAG –∏–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {msg}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å RAG –∏–Ω–¥–µ–∫—Å: {msg}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RAG –∏–Ω–¥–µ–∫—Å–∞: {e}")

    async def handle_file_replacement(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–º–µ–Ω—ã —Ñ–∞–π–ª–∞"""
        token = callback.data.split(":")[1]
        replace = callback.data.startswith("replace_file:")
        
        await callback.answer()
        
        user_id = str(callback.from_user.id)
        entry = next((f for f in self.handler.pending_files.get(user_id, []) 
                     if f.get("token") == token), None)
        
        if not entry:
            await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        if not replace:
            try:
                self.handler.pending_files[user_id].remove(entry)
            except ValueError:
                pass
            await callback.message.edit_text("‚≠ïÔ∏è –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω.")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, entry["file_name"], entry["file_data"], 
            entry.get("selected_encoding")
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            enc_info = f"üì§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {entry.get('selected_encoding')} ‚Üí UTF-8\n" if entry.get("selected_encoding") else ""
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª '{entry['file_name']}' –∑–∞–º–µ–Ω—ë–Ω!\n"
                f"üìÇ –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"{enc_info}"
                f"üìä {msg}"
            )

            asyncio.create_task(self._update_rag_index_if_needed(user_id, codebase_id, entry['file_name']))

            try:
                self.handler.pending_files[user_id].remove(entry)
            except ValueError:
                pass
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")

    async def handle_encoding(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        await callback.answer()
        
        try:
            _, token, encoding = callback.data.split(":", 2)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        
        user_id = str(callback.from_user.id)
        file_info = next((f for f in self.handler.pending_files.get(user_id, []) 
                         if f.get("token") == token and f.get("kind") == "encoding_prompt"), None)
        
        if not file_info:
            await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        exists = await self.file_manager.file_exists(user_id, codebase_id, file_info["file_name"])
        
        if exists:
            # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∑–∞–º–µ–Ω–µ
            file_info["kind"] = "replace_after_encoding"
            file_info["selected_encoding"] = encoding
            
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace_file:{token}"),
                InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_file:{token}")
            ]])
            
            await callback.message.edit_text(
                f"‚ö†Ô∏è –§–∞–π–ª '{file_info['file_name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}\n"
                f"–ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª?",
                reply_markup=kb
            )
            return
        
        # –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        file_info["kind"] = "save_new_after_encoding"
        file_info["selected_encoding"] = encoding
        file_info["codebase_id"] = codebase_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = file_info.get("file_size", 0)
        if file_size < 1024:
            size_str = f"{file_size} –±–∞–π—Ç"
        elif file_size < 1024 * 1024:
            size_str = f"{file_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{file_size / (1024 * 1024):.1f} –ú–ë"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_new_after_enc:{token}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_new_after_enc:{token}")
        ]])
        
        await callback.message.edit_text(
            f"üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª: {file_info['file_name']}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
            f"üì§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding} ‚Üí UTF-8\n"
            f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª?",
            reply_markup=kb
        )


    async def handle_save_new_after_encoding(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        await callback.answer()
        
        user_id = str(callback.from_user.id)
        token = callback.data.split(":", 1)[1]
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ pending_files
        file_info = next((f for f in self.handler.pending_files.get(user_id, [])
                         if f.get("token") == token and f.get("kind") == "save_new_after_encoding"), None)
        
        if not file_info:
            await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        codebase_id = file_info["codebase_id"]
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, file_info["file_name"], file_info["file_data"], 
            file_info.get("selected_encoding")
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª '{file_info['file_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"üì§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {file_info.get('selected_encoding')} ‚Üí UTF-8\n"
                f"üìä {msg}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º RAG –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
            asyncio.create_task(self._update_rag_index_if_needed(
                user_id, codebase_id, file_info['file_name']
            ))
            
            await callback.answer("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ pending_files
            try:
                self.handler.pending_files[user_id].remove(file_info)
            except ValueError:
                pass
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

    async def handle_cancel_new_after_encoding(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        await callback.answer()
        
        user_id = str(callback.from_user.id)
        token = callback.data.split(":", 1)[1]
        
        # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ pending_files
        if user_id in self.handler.pending_files:
            for pending in self.handler.pending_files[user_id]:
                if pending.get("token") == token and pending.get("kind") == "save_new_after_encoding":
                    self.handler.pending_files[user_id].remove(pending)
                    break
        
        await callback.message.edit_text(
            "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É."
        )
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    async def handle_conversion(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        await callback.answer()
        
        try:
            _, token, target = callback.data.split(":", 2)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        
        user_id = str(callback.from_user.id)
        entry = None
        
        for f in self.handler.pending_files.get(user_id, []):
            if f.get("token") == token:
                entry = f
                break
        
        if not entry:
            await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        file_bytes = entry["file_data"]
        orig_name = entry["file_name"]
        
        if target == "ai_ocr" and entry.get("kind") == "image_convert":
            await callback.message.edit_text(
                f"‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI...\n"
                f"üñºÔ∏è –§–∞–π–ª: {orig_name}\n"
                f"‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥"
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Markdown —á–µ—Ä–µ–∑ OCR
            success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
                user_id, file_bytes, orig_name
            )
            
            if success and md_content:
                try:

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                    if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                        self.handler.agent_handler.save_md_file_for_macros(
                            user_id, new_name, md_content, new_name
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await callback.message.reply_document(
                        types.BufferedInputFile(
                            md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                            new_name
                        ),
                        caption=f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\nüìé {new_name}"
                    )
                    
                    await callback.message.edit_text(
                        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n"
                        f"üñºÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                        f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                        f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                    )
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    from .processors.base_processor import BaseProcessor
                    base_processor = BaseProcessor(self.handler)
                    
                    codebase_id = entry.get("codebase_id")
                    if not codebase_id:
                        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
                        codebase_id = user_codebases.get("active")
                    
                    if codebase_id:
                        await base_processor.offer_save_converted(
                            callback.message,
                            new_name,
                            md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                            user_id,
                            codebase_id
                        )
                    
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                    await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏\n"
                    f"–§–∞–π–ª: {orig_name}\n\n"
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –±—ã—Ç—å –Ω–µ—á–∏—Ç–∞–µ–º—ã–º"
                )
        
        elif target == "md" and entry.get("kind") == "table_convert":
            await callback.message.edit_text(f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ Markdown...")
            
            success, msg, converted_filename = await self.file_manager.save_file(
                user_id, codebase_id, orig_name, file_bytes
            )
            
            if success:
                config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
                
                if converted_filename:
                    asyncio.create_task(self._update_rag_index_if_needed(user_id, codebase_id, converted_filename))
    
                    md_content = await self.file_manager.get_file(user_id, codebase_id, converted_filename)
                    if md_content:
                        try:
                            await callback.message.reply_document(
                                types.BufferedInputFile(md_content, converted_filename),
                                caption=f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Markdown!\nüìé {converted_filename}"
                            )
                            
                            from .processors.base_processor import BaseProcessor
                            base_processor = BaseProcessor(self.handler)
                            await base_processor.offer_save_converted(
                                callback.message, converted_filename, md_content, user_id, codebase_id
                            )
                            
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                
                await callback.message.edit_text(
                    f"‚úÖ –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üìÇ –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                    f"üìä {msg}"
                )
            else:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")
        
        try:
            self.handler.pending_files[user_id].remove(entry)
        except ValueError:
            pass

    async def handle_save_as(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –µ—Å—Ç—å"""
        await callback.answer()
        
        try:
            _, token, save_type = callback.data.split(":", 2)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        
        user_id = str(callback.from_user.id)
        entry = None
        
        for f in self.handler.pending_files.get(user_id, []):
            if f.get("token") == token:
                entry = f
                break
        
        if not entry:
            await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        if save_type == "cancel":
            await callback.message.edit_text("‚≠ï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            try:
                self.handler.pending_files[user_id].remove(entry)
            except ValueError:
                pass
            return
        
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, entry["file_name"], entry["file_data"], 
            encoding=None, skip_conversion=True
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª '{entry['file_name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –µ—Å—Ç—å!\n"
                f"üìÇ –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"üìä {msg}"
            )

            asyncio.create_task(self._update_rag_index_if_needed(user_id, codebase_id, entry['file_name']))
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")
        
        try:
            self.handler.pending_files[user_id].remove(entry)
        except ValueError:
            pass

    async def handle_save_converted(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        await callback.answer()
        
        try:
            _, token, action = callback.data.split(":", 2)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        
        user_id = str(callback.from_user.id)
        entry = None
        
        for f in self.handler.pending_files.get(user_id, []):
            if f.get("token") == token and f.get("kind") == "save_converted":
                entry = f
                break
        
        if not entry:
            await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if action == "skip":
            await callback.message.edit_text("‚≠ï –§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É")
            try:
                self.handler.pending_files[user_id].remove(entry)
            except ValueError:
                pass
            return
        
        codebase_id = entry["codebase_id"]
        filename = entry["file_name"]
        file_data = entry["file_data"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, filename, file_data,
            encoding="utf-8", skip_conversion=True
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            action_text = "–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω" if action == "replace" else "—Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª '{filename}' {action_text} –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ!\n"
                f"üìö –ë–∞–∑–∞: {config['name']}\n"
                f"üìä {msg}"
            )

            asyncio.create_task(self._update_rag_index_if_needed(user_id, codebase_id, filename))
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {msg}")
        
        try:
            self.handler.pending_files[user_id].remove(entry)
        except ValueError:
            pass

    async def handle_audio_save(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        await callback.answer()
        
        try:
            _, token, action = callback.data.split(":", 2)
        except ValueError:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
            return
        
        user_id = str(callback.from_user.id)
        entry = None
        
        for f in self.handler.pending_files.get(user_id, []):
            if f.get("token") == token and f.get("kind") in ["audio_save", "voice_save"]:
                entry = f
                break
        
        if not entry:
            await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if action == "skip":
            await callback.message.edit_text("‚≠ï –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É")
            try:
                self.handler.pending_files[user_id].remove(entry)
            except ValueError:
                pass
            return
        
        codebase_id = entry["codebase_id"]
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        text_filename = entry.get("text_filename")
        text_data = entry.get("text_data")
        
        if text_filename and text_data:
            success, msg, _ = await self.file_manager.save_file(
                user_id, codebase_id, text_filename, text_data,
                encoding="utf-8", skip_conversion=True
            )
            
            if success:
                await callback.message.edit_text(
                    f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É {config['name']}\n"
                    f"üìù –§–∞–π–ª: {text_filename}\n"
                    f"üìä {msg}"
                )

                asyncio.create_task(self._update_rag_index_if_needed(user_id, codebase_id, text_filename))
            else:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é\n"
                    f"–û—à–∏–±–∫–∞: {msg}"
                )
        else:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        try:
            self.handler.pending_files[user_id].remove(entry)
        except ValueError:
            pass



    async def handle_save_new_file(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        await callback.answer()
        
        user_id = str(callback.from_user.id)
        token = callback.data.split(":", 1)[1]
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ pending_files
        if user_id not in self.handler.pending_files:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await callback.message.delete()
            return
        
        file_info = None
        for pending in self.handler.pending_files[user_id]:
            if pending.get("token") == token and pending.get("kind") == "save_new_file":
                file_info = pending
                break
        
        if not file_info:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            await callback.message.delete()
            return
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending_files
        self.handler.pending_files[user_id].remove(file_info)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        success, msg, _ = await self.file_manager.save_file(
            user_id, 
            file_info["codebase_id"], 
            file_info["file_name"], 
            file_info["file_data"],
            encoding=file_info.get("selected_encoding")
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, file_info["codebase_id"])
            
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª '{file_info['file_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"üì§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {file_info.get('selected_encoding', 'UTF-8')} ‚Üí UTF-8\n"
                f"üìä {msg}"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º RAG –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π
            asyncio.create_task(self._update_rag_index_if_needed(
                user_id, file_info["codebase_id"], file_info['file_name']
            ))
            
            await callback.answer("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {msg}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", show_alert=True)

    async def handle_cancel_new_file(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        await callback.answer()
        
        user_id = str(callback.from_user.id)
        token = callback.data.split(":", 1)[1]
        
        # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ pending_files
        if user_id in self.handler.pending_files:
            for pending in self.handler.pending_files[user_id]:
                if pending.get("token") == token and pending.get("kind") == "save_new_file":
                    self.handler.pending_files[user_id].remove(pending)
                    break
        
        await callback.message.edit_text(
            "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É."
        )
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
# code/handlers/file_operations/processors/document.py
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, Word, PowerPoint, HTML)
"""
import os
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from ..states import FileStates
from .base_processor import BaseProcessor

logger = logging.getLogger(__name__)

class DocumentProcessor(BaseProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    async def process_pdf_file(self, message, processing_msg, orig_name, file_bytes, 
                              state, user_id, codebase_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞"""
        await state.set_state(FileStates.processing_pdf)
        await state.update_data(
            processing_pdf=True,
            cancel_requested=False,
            pdf_filename=orig_name,
            pdf_data=file_bytes,
            progress_msg=processing_msg
        )
        
        await processing_msg.edit_text(
            f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Ñ–∞–π–ª '{orig_name}'...\n"
            f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞..."
        )
        
        async def update_progress(text: str):
            try:
                await processing_msg.edit_text(text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
        
        async def check_cancel():
            data = await state.get_data()
            return data.get("cancel_requested", False)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ Markdown
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id,
            file_bytes, orig_name,
            progress_callback=update_progress,
            cancel_check=check_cancel
        )
        
        await state.clear()
        
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ PDF –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Markdown!\nüìé {new_name}"
                )
                
                await processing_msg.edit_text(
                    f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, orig_name
                    )
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
                await self.offer_save_converted(
                    message,
                    new_name,
                    md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                    user_id,
                    codebase_id
                )
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"
                )
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –≤ Markdown\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π PDF –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            )

    async def process_html_file(self, message, processing_msg, orig_name, file_bytes, user_id, codebase_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Ñ–∞–π–ª–æ–≤"""
        await processing_msg.edit_text(f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é HTML –≤ Markdown...")
    
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ Markdown
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id, file_bytes, orig_name
        )
    
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ HTML –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Markdown!\nüìé {new_name}"
                )
            
                await processing_msg.edit_text(
                    f"‚úÖ HTML —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üåê –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, orig_name
                    )
            
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –±–∞–∑—É
                await self.offer_save_converted(
                    message,
                    new_name,
                    md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                    user_id,
                    codebase_id
                )
            
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"
                )
        else:
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å HTML –≤ Markdown\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
                f"‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ HTML\n"
                f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
            )

    async def process_powerpoint_file(self, message, processing_msg, orig_name, file_bytes, user_id, codebase_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PowerPoint —Ñ–∞–π–ª–æ–≤"""
        ext = os.path.splitext(orig_name.lower())[1]
        file_type = "PowerPoint" if ext == ".pptx" else "PowerPoint 97-2003"
    
        await processing_msg.edit_text(f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {file_type} –≤ Markdown...")
    
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PowerPoint –≤ Markdown
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id, file_bytes, orig_name
        )
    
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ {file_type} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Markdown!\nüìé {new_name}"
                )
            
                await processing_msg.edit_text(
                    f"‚úÖ {file_type} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, orig_name
                    )
            
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –±–∞–∑—É
                await self.offer_save_converted(
                    message,
                    new_name,
                    md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                    user_id,
                    codebase_id
                )
            
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"
                )
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {file_type} –≤ Markdown\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –§–∞–π–ª –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º\n"
                f"‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n"
                f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ python-pptx –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"
            )

    async def process_document_file(self, message, processing_msg, orig_name, file_bytes, user_id, codebase_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Word/RTF/ODT"""
        ext = os.path.splitext(orig_name.lower())[1]
        doc_type = {
            '.docx': 'Word',
            '.doc': 'Word 97-2003',
            '.rtf': 'RTF',
            '.odt': 'OpenDocument'
        }.get(ext, '–î–æ–∫—É–º–µ–Ω—Ç')
    
        await processing_msg.edit_text(f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {doc_type} –≤ Markdown...")
    
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ Markdown
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id, file_bytes, orig_name
        )
    
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ {doc_type} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Markdown!\nüìé {new_name}"
                )
            
                await processing_msg.edit_text(
                    f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                    f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, orig_name
                    )
            
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ –±–∞–∑—É
                await self.offer_save_converted(
                    message,
                    new_name,
                    md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                    user_id,
                    codebase_id
                )
            
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"
                )
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {doc_type} –≤ Markdown\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º\n"
                f"‚Ä¢ –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç pandoc –∏–ª–∏ python-docx –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
                f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )


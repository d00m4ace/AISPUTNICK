# code/handlers/file_operations/processors/audio.py
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
"""
import os
import re
import secrets
import logging
from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_processor import BaseProcessor

from user_activity_logger import activity_logger

logger = logging.getLogger(__name__)


class AudioProcessor(BaseProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    
    # Telegram's file download limit for bots - this is a hard limit
    TELEGRAM_BOT_FILE_LIMIT = 20 * 1024 * 1024  # 20MB
    
    def __init__(self, parent_handler):
        super().__init__(parent_handler)
        self.audio_converter = parent_handler.audio_converter

    def _format_transcript_text(self, text: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        text = re.sub(r'\s+', ' ', text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'(?<=[.!?])\s+', text)
        
        formatted_lines = []
        current_paragraph = []
        current_length = 0
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
            current_paragraph.append(sentence)
            current_length += len(sentence)
            
            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–ª–∏–Ω–Ω—ã–º –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å
            if (current_length > 500 or 
                sentence.endswith('!') or 
                sentence.endswith('?') or
                len(current_paragraph) >= 3):
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∞–±–∑–∞—Ü
                paragraph = ' '.join(current_paragraph)
                formatted_lines.append(paragraph)
                formatted_lines.append('')  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
                
                current_paragraph = []
                current_length = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if current_paragraph:
            paragraph = ' '.join(current_paragraph)
            formatted_lines.append(paragraph)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        result = '\n'.join(formatted_lines)
        result = re.sub(r'\n{3,}', '\n\n', result)
        
        return result.strip()

    def _format_duration(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes}:{secs:02d}"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            secs = seconds % 60
            return f"{hours}:{minutes:02d}:{secs:02d}"

    def _get_audio_compression_tips(self, file_size: int, duration: int = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∂–∞—Ç–∏—é –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        size_mb = file_size / (1024 * 1024)
        
        tips = [
            "üí° **–ö–∞–∫ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:**\n"
        ]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if duration and duration > 0:
            current_bitrate = (file_size * 8) / duration / 1000  # –≤ kbps
            recommended_bitrate = min(128, (self.TELEGRAM_BOT_FILE_LIMIT * 8) / duration / 1000 * 0.9)
            
            tips.append(f"üìä –¢–µ–∫—É—â–∏–π –±–∏—Ç—Ä–µ–π—Ç: ~{current_bitrate:.0f} kbps")
            tips.append(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±–∏—Ç—Ä–µ–π—Ç: {recommended_bitrate:.0f} kbps –∏–ª–∏ –Ω–∏–∂–µ\n")
        
        tips.extend([
            "**üéß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Audacity (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):**",
            "1. –°–∫–∞—á–∞–π—Ç–µ [Audacity](https://www.audacityteam.org/) - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
            "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –∞—É–¥–∏–æ —Ñ–∞–π–ª: `File ‚Üí Open`",
            "3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: `File ‚Üí Export ‚Üí Export Audio`",
            "4. **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ä–µ—á–∏/–ø–æ–¥–∫–∞—Å—Ç–æ–≤:**",
            "   ‚Ä¢ Format: `Ogg Vorbis Files` (–ª—É—á—à–µ–µ —Å–∂–∞—Ç–∏–µ)",
            "   ‚Ä¢ Channels: `Mono` (—É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –≤–¥–≤–æ–µ)",
            "   ‚Ä¢ Sample Rate: `22050 Hz` –∏–ª–∏ `44100 Hz`",
            "   ‚Ä¢ Quality: `0-2` (–¥–ª—è —Ä–µ—á–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)",
            "5. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - MP3:**",
            "   ‚Ä¢ Format: `MP3 Files`",
            "   ‚Ä¢ Bit Rate Mode: `Constant`",
            "   ‚Ä¢ Quality: `64-96 kbps` (–¥–ª—è —Ä–µ—á–∏)",
            "   ‚Ä¢ Channel Mode: `Mono`\n",
            
            "**–û–Ω–ª–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã (–±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏):**",
            "‚Ä¢ [Online Audio Converter](https://online-audio-converter.com/ru/) - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
            "‚Ä¢ [CloudConvert](https://cloudconvert.com/mp3-converter) - 25 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π/–¥–µ–Ω—å",
            "‚Ä¢ [Convertio](https://convertio.co/ru/mp3-converter/) - –¥–æ 100MB –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n",
        ])
        
        # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        if size_mb > 40:
            tips.extend([
                "**üìÅ –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>40MB):**",
                "‚Ä¢ **–í Audacity:** —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏",
                "  - –í—ã–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 20 –º–∏–Ω—É—Ç: `Edit ‚Üí Select ‚Üí Region`",
                "  - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ: `File ‚Üí Export ‚Üí Export Selected Audio`",
                "  - –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π",
                "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ [Mp3splt](http://mp3splt.sourceforge.net/) –¥–ª—è –∞–≤—Ç–æ-—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
            ])
        
        tips.extend([
            "**üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**",
            "‚Ä¢ [MP3 Converter](https://play.google.com/store/apps/details?id=com.AndroidRock.Mp3Converter) (Android)",
            "‚Ä¢ [Audio Converter](https://apps.apple.com/app/id1285358109) (iOS)",
            "‚Ä¢ [Lexis Audio Editor](https://play.google.com/store/apps/details?id=com.pamsys.lexisaudioeditor) (Android)\n",
            
            f"üìå **–¶–µ–ª—å:** —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ {self.TELEGRAM_BOT_FILE_LIMIT / (1024*1024):.0f} MB",
            f"üí° **–°–æ–≤–µ—Ç:** –î–ª—è —Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mono + –Ω–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç (64-96 kbps)"
        ])
        
        return "\n".join(tips)

    async def handle_voice(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
        user_id = str(message.from_user.id)
        
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            await message.reply(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.\n"
                "/create_codebase - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
                "/codebases - —Å–ø–∏—Å–æ–∫ –±–∞–∑"
            )
            return
        
        if not self.audio_converter:
            await message.reply(
                "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API –∫–ª—é—á."
            )
            return
        
        voice = message.voice
        duration = voice.duration
        file_size = voice.file_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if file_size > self.TELEGRAM_BOT_FILE_LIMIT:
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –±—ã–≤–∞—é—Ç —Ç–∞–∫–∏–º–∏ –±–æ–ª—å—à–∏–º–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await message.reply(
                f"‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.file_manager.format_size(self.TELEGRAM_BOT_FILE_LIMIT)}\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {self.file_manager.format_size(file_size)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"voice_{timestamp}.ogg"
        text_filename = f"voice_{timestamp}_transcript.txt"
        
        processing_msg = await message.reply(
            f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
            f"üìä –†–∞–∑–º–µ—Ä: {self.file_manager.format_size(file_size)}"
        )
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            tg_file = await self.bot.get_file(voice.file_id)
            stream = await self.bot.download_file(tg_file.file_path)
            voice_bytes = stream.getvalue() if hasattr(stream, "getvalue") else stream
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
            )
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º
            success, _, raw_text = await self.audio_converter.convert_to_text(
                voice_bytes,
                filename,
                language='ru'
            )
            
            if success and raw_text:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                text = self._format_transcript_text(raw_text)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                words = len(text.split())
                chars = len(text)
                lines = len(text.split('\n'))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
                preview = text[:500] + "..." if len(text) > 500 else text
                
                await processing_msg.edit_text(
                    f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {chars:,}\n"
                    f"‚Ä¢ –°–ª–æ–≤: {words:,}\n"
                    f"‚Ä¢ –°—Ç—Ä–æ–∫: {lines:,}\n"
                    f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫\n\n"
                    f"–¢–µ–∫—Å—Ç (–ø—Ä–µ–≤—å—é):\n{preview}"
                )
    
                # –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
                activity_logger.log(user_id, "VOICE_TRANSCRIPT", f"duration={duration}s,words={words},chars={len(text)}" )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
                await message.reply_document(
                    types.BufferedInputFile(
                        text.encode('utf-8'),
                        text_filename
                    ),
                    caption=f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\nüìä {words:,} —Å–ª–æ–≤, {lines:,} —Å—Ç—Ä–æ–∫"
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
                await self._offer_audio_save(
                    message, text_filename, text.encode('utf-8'), 
                    user_id, user_codebases["active"]
                )
                
            else:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def handle_audio(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ (–Ω–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            await message.reply(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.\n"
                "/create_codebase - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
                "/codebases - —Å–ø–∏—Å–æ–∫ –±–∞–∑"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        if not self.audio_converter:
            await message.reply(
                "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"
                "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API –∫–ª—é—á."
            )
            return
        
        audio = message.audio
        if not audio:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        duration = audio.duration
        file_size = audio.file_size
        filename = audio.file_name or f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3"
        performer = audio.performer or "Unknown"
        title = audio.title or "Untitled"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
        if file_size > self.TELEGRAM_BOT_FILE_LIMIT:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–∂–∞—Ç–∏—é
            compression_tips = self._get_audio_compression_tips(file_size, duration)
            
            await message.reply(
                f"‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API**\n\n"
                f"üìÑ –§–∞–π–ª: {title} - {performer}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {self.file_manager.format_size(file_size)}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n"
                f"üö´ –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –±–æ—Ç–æ–≤: {self.file_manager.format_size(self.TELEGRAM_BOT_FILE_LIMIT)}\n\n"
                f"{compression_tips}",
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info(f"User {user_id} tried to upload large audio: {file_size} bytes, {duration}s")
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processing_msg = await message.reply(
            f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {performer}\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {self.file_manager.format_size(file_size)}\n"
            f"üìÑ –§–∞–π–ª: {filename}"
        )
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            tg_file = await self.bot.get_file(audio.file_id)
            stream = await self.bot.download_file(tg_file.file_path)
            audio_bytes = stream.getvalue() if hasattr(stream, "getvalue") else stream
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not self.audio_converter.supports(filename):
                ext = os.path.splitext(filename.lower())[1]
                await processing_msg.edit_text(
                    f"‚ùå –§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.\n\n"
                    f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                    f"{', '.join(sorted(self.audio_converter.SUPPORTED_FORMATS))}\n\n"
                    f"–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                await self._save_audio_original_only(
                    message, processing_msg, filename, audio_bytes, 
                    user_id, user_codebases["active"]
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ...\n"
                f"üìù {title} - {performer}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
            )
            
            async def update_progress(text: str):
                try:
                    await processing_msg.edit_text(
                        f"üéµ {title} - {performer}\n"
                        f"‚è±Ô∏è {self._format_duration(duration)}\n\n"
                        f"{text}"
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ
            success, text_filename, text = await self.audio_converter.convert_to_text(
                audio_bytes,
                filename,
                progress_callback=update_progress
            )
            
            if success and text:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                text = self._format_transcript_text(text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                metadata = (
                    f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞\n\n"
                    f"–§–∞–π–ª: {filename}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                    f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {performer}\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n"
                    f"–î–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"---\n\n"
                )
                
                full_text = metadata + text
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                words = len(text.split())
                lines = len(text.split('\n'))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
                preview = text[:800] + "..." if len(text) > 800 else text
                
                await processing_msg.edit_text(
                    f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n\n"
                    f"üéµ {title} - {performer}\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:\n"
                    f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(text):,}\n"
                    f"‚Ä¢ –°–ª–æ–≤: {words:,}\n"
                    f"‚Ä¢ –°—Ç—Ä–æ–∫: {lines:,}\n\n"
                    f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø—Ä–µ–≤—å—é):\n"
                    f"```\n{preview}\n```"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
                base, _ = os.path.splitext(filename)
                text_filename = f"{base}_transcript.txt"
                
                await message.reply_document(
                    types.BufferedInputFile(
                        full_text.encode('utf-8'),
                        text_filename
                    ),
                    caption=(
                        f"üìù –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ\n"
                        f"üéµ {title} - {performer}\n"
                        f"üìä {words:,} —Å–ª–æ–≤, {lines:,} —Å—Ç—Ä–æ–∫"
                    )
                )

                # –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥
                activity_logger.log(user_id, "AUDIO_TRANSCRIPT", f"duration={duration}s,words={words},chars={len(text)}" )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, text_filename, full_text, filename
                    )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
                await self._offer_audio_save(
                    message, text_filename, 
                    full_text.encode('utf-8'), 
                    user_id, user_codebases["active"]
                )
                
            else:
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                await processing_msg.edit_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ.\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—á–∏ (—Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞)\n"
                    f"‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏\n"
                    f"‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫\n\n"
                    f"–°–æ—Ö—Ä–∞–Ω—è—é —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª..."
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
                await self._save_audio_original_only(
                    message, processing_msg, filename, audio_bytes,
                    user_id, user_codebases["active"]
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞
            error_msg = str(e).lower()
            if "file is too big" in error_msg or "file_too_big" in error_msg:
                # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–∞–Ω–µ–µ,
                # –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                compression_tips = self._get_audio_compression_tips(file_size, duration)
                
                await processing_msg.edit_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞**\n\n"
                    f"Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç–∞–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 20 MB.\n\n"
                    f"{compression_tips}",
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            else:
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

    async def process_audio_file(self, message, processing_msg, orig_name, file_bytes, 
                                user_id, codebase_id, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        file_size = len(file_bytes)
        
        await processing_msg.edit_text(
            f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞—É–¥–∏–æ —Ñ–∞–π–ª: {orig_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {self.file_manager.format_size(file_size)}\n"
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏..."
        )
        
        async def update_progress(text: str):
            try:
                await processing_msg.edit_text(text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ
        success, text_filename, text = await self.audio_converter.convert_to_text(
            file_bytes,
            orig_name,
            progress_callback=update_progress
        )
        
        if success and text:
            # –ù–ï –°–æ—Ö—Ä–∞–Ω—è–µ–º! –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            #await self.file_manager.save_file(
            #    user_id, codebase_id, orig_name, file_bytes,
            #    skip_conversion=True
            #)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            save_success, save_msg, _ = await self.file_manager.save_file(
                user_id, codebase_id, text_filename,
                text.encode('utf-8'), encoding='utf-8'
            )
            
            if save_success:
                config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
                preview = text[:800] + "..." if len(text) > 800 else text
                
                await processing_msg.edit_text(
                    f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n\n"
                    f"üéµ –û—Ä–∏–≥–∏–Ω–∞–ª: {orig_name}\n"
                    f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text_filename}\n"
                    f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                    f"üìä –°–∏–º–≤–æ–ª–æ–≤: {len(text)}\n\n"
                    f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{preview}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        text.encode('utf-8'),
                        text_filename
                    ),
                    caption=f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"
                )
            else:
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {save_msg}")
        else:
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—á—å –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
            )

    async def _offer_audio_save(self, message, text_filename, text_bytes, user_id, codebase_id):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É"""
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        text_exists = await self.file_manager.file_exists(user_id, codebase_id, text_filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        token = secrets.token_urlsafe(8)
        if user_id not in self.handler.pending_files:
            self.handler.pending_files[user_id] = []
        
        self.handler.pending_files[user_id].append({
            "kind": "audio_save",
            "token": token,
            "text_filename": text_filename,
            "text_data": text_bytes,
            "codebase_id": codebase_id
        })
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é", 
                callback_data=f"save_audio:{token}:save"
            )],
            [InlineKeyboardButton(
                text="‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", 
                callback_data=f"save_audio:{token}:skip"
            )]
        ])
        
        msg = f"üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É {config['name']}?"
        if text_exists:
            msg += f"\n‚ö†Ô∏è –§–∞–π–ª '{text_filename}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω"
        
        await message.reply(msg, reply_markup=keyboard)

    async def _save_audio_original_only(self, message, processing_msg, 
                                       filename, audio_bytes, user_id, codebase_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, filename, audio_bytes,
            skip_conversion=True
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            await processing_msg.edit_text(
                f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"üìÑ –§–∞–π–ª: {filename}\n"
                f"üìä {msg}"
            )
        else:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {msg}")
# code/handlers/file_operations/processors/base_processor.py
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
"""
import secrets
import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)


class BaseProcessor:
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    
    def __init__(self, parent_handler):
        self.handler = parent_handler
        self.bot = parent_handler.bot
        self.user_manager = parent_handler.user_manager
        self.codebase_manager = parent_handler.codebase_manager
        self.file_manager = parent_handler.file_manager

    async def offer_save_converted(self, message, converted_filename, md_content, 
                                   user_id, codebase_id):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
        exists = await self.file_manager.file_exists(user_id, codebase_id, converted_filename)
        
        token = secrets.token_urlsafe(8)
        if user_id not in self.handler.pending_files:
            self.handler.pending_files[user_id] = []
        
        self.handler.pending_files[user_id].append({
            "kind": "save_converted",
            "token": token,
            "file_name": converted_filename,
            "file_data": md_content if isinstance(md_content, bytes) else md_content.encode('utf-8'),
            "codebase_id": codebase_id
        })
        
        if exists:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑–µ", callback_data=f"save_converted:{token}:replace")],
                [InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data=f"save_converted:{token}:skip")]
            ])
            
            await message.reply(
                f"‚ö†Ô∏è –§–∞–π–ª '{converted_filename}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ.\n"
                f"–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π?",
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ", callback_data=f"save_converted:{token}:save")],
                [InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data=f"save_converted:{token}:skip")]
            ])
            
            await message.reply(
                f"üí° –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å '{converted_filename}' –≤ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É?",
                reply_markup=keyboard
            )

    async def offer_save_original(self, message, orig_name, file_bytes, file_size,
                                  user_id, codebase_id, existing_token=None):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        if user_id not in self.handler.pending_files:
            self.handler.pending_files[user_id] = []
        
        token = existing_token or secrets.token_urlsafe(8)
        self.handler.pending_files[user_id].append({
            "kind": "save_original",
            "token": token,
            "file_name": orig_name,
            "file_size": file_size,
            "file_data": file_bytes,
            "codebase_id": codebase_id
        })
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data=f"save_as:{token}:original")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"save_as:{token}:cancel")]
        ])
        
        return keyboard, token

    def get_ai_provider_name(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if hasattr(self.file_manager, 'ai_interface') and self.file_manager.ai_interface:
            if self.file_manager.ai_interface.has_api_key("openai"):
                return "GPT-4o"
            elif self.file_manager.ai_interface.has_api_key("anthropic"):
                return "Claude"
        return "AI"
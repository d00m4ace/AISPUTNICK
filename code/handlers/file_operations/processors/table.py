# code/handlers/file_operations/processors/table.py
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (Excel, CSV)
"""
import os
import logging
from aiogram import types
from .base_processor import BaseProcessor

logger = logging.getLogger(__name__)

class TableProcessor(BaseProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    async def process_table_file(self, message, processing_msg, orig_name, file_bytes, 
                                document, ext, user_id, existing_token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Excel/CSV"""
        file_type = "Excel" if ext in {".xls", ".xlsx"} else "CSV"
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        # –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        await processing_msg.edit_text(f"‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {file_type} –≤ Markdown...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Markdown
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id, file_bytes, orig_name
        )
        
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ {file_type} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Markdown!\nüìé {new_name}"
                )
                
                await processing_msg.edit_text(
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {orig_name}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n\n"
                    f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, orig_name
                    )
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
                await self.offer_save_converted(
                    message,
                    new_name,
                    md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                    user_id,
                    codebase_id
                )
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        else:
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            keyboard, token = await self.offer_save_original(
                message, orig_name, file_bytes, document.file_size,
                user_id, codebase_id, existing_token
            )
            
            await processing_msg.edit_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {file_type} —Ñ–∞–π–ª\n"
                f"–§–∞–π–ª: {orig_name}\n\n"
                f"–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª?",
                reply_markup=keyboard
            )
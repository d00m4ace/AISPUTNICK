# code/handlers/file_operations/processors/image.py
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
import os
import secrets
import logging
from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_processor import BaseProcessor

logger = logging.getLogger(__name__)


class ImageProcessor(BaseProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    async def handle_photo(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases.get("active")
        
        if not codebase_id:
            await message.reply(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.\n"
                "/create_codebase - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\n"
                "/codebases - —Å–ø–∏—Å–æ–∫ –±–∞–∑"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"photo_{timestamp}.jpg"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        caption = message.caption or ""
        
        processing_msg = await message.reply(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            tg_file = await self.bot.get_file(photo.file_id)
            stream = await self.bot.download_file(tg_file.file_path)
            file_bytes = stream.getvalue() if hasattr(stream, "getvalue") else stream
            
            # –ï—Å–ª–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å—Ä–∞–∑—É —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º
            auto_recognize = any(word in caption.lower() for word in [
                "—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å", "—Ä–∞—Å–ø–æ–∑–Ω–∞–π", "—Ç–µ–∫—Å—Ç", "ocr", "recognize", "text"
            ])
            
            if auto_recognize:
                await self._process_image_with_ocr(
                    message, processing_msg, filename, file_bytes, codebase_id
                )
            else:
                await self._process_image_with_options(
                    message, processing_msg, filename, file_bytes, photo, user_id
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}", exc_info=True)
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def process_image_file(self, message, processing_msg, orig_name, file_bytes, 
                                document, user_id, existing_token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        if hasattr(self.file_manager, 'ai_interface') and self.file_manager.ai_interface:
            # –ï—Å–ª–∏ –µ—Å—Ç—å AI, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if user_id not in self.handler.pending_files:
                self.handler.pending_files[user_id] = []
            
            token = existing_token or secrets.token_urlsafe(8)
            self.handler.pending_files[user_id].append({
                "kind": "image_convert",
                "token": token,
                "file_name": orig_name,
                "file_size": document.file_size,
                "file_data": file_bytes,
                "codebase_id": codebase_id
            })
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI", callback_data=f"conv:{token}:ai_ocr")],
                [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"save_as:{token}:original")]
            ])
            
            ai_provider = self.get_ai_provider_name()
            
            await processing_msg.edit_text(
                f"üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {orig_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {self.file_manager.format_size(document.file_size)}\n"
                f"ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {ai_provider}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç AI, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
            success, msg, _ = await self.file_manager.save_file(
                user_id, codebase_id, orig_name, file_bytes,
                encoding=None, skip_conversion=True
            )
            
            if success:
                config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
                await processing_msg.edit_text(
                    f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                    f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                    f"üìä {msg}"
                )
            else:
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")

    async def _process_image_with_ocr(self, message, processing_msg, filename, 
                                     file_bytes, codebase_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º OCR"""
        await processing_msg.edit_text(
            f"‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI...\n"
            f"‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥"
        )
        
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ codebase_id –Ω–µ None
        if not codebase_id:
            user_codebases = await self.codebase_manager.get_user_codebases(user_id)
            codebase_id = user_codebases["active"]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Markdown —á–µ—Ä–µ–∑ OCR
        success, new_name, md_content = await self.file_manager.markdown_converter.convert_to_markdown(
            user_id, file_bytes, filename
        )
        
        if success and md_content:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.reply_document(
                    types.BufferedInputFile(
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        new_name
                    ),
                    caption=f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\nüìé {new_name}"
                )
                
                config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
                await processing_msg.edit_text(
                    f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!\n"
                    f"üñºÔ∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {filename}\n"
                    f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_name}\n"
                    f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name'] if config else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}\n\n"
                    f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                if hasattr(self.handler.handler, 'agent_handler') and self.handler.handler.agent_handler:
                    content_str = md_content if isinstance(md_content, str) else md_content.decode('utf-8')
                    self.handler.handler.agent_handler.save_md_file_for_macros(
                        user_id, new_name, content_str, filename
                    )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–∞–∑—É
                if codebase_id and user_id:
                    await self.offer_save_converted(
                        message,
                        new_name,
                        md_content.encode('utf-8') if isinstance(md_content, str) else md_content,
                        user_id,
                        codebase_id
                    )
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: codebase_id={codebase_id}, user_id={user_id}")
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}", exc_info=True)
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}\n"
                    f"–¢–µ–∫—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                )
        else:
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏\n"
                f"–§–∞–π–ª: {filename}\n\n"
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –±—ã—Ç—å –Ω–µ—á–∏—Ç–∞–µ–º—ã–º"
            )

    async def _process_image_with_options(self, message, processing_msg, filename, 
                                         file_bytes, photo, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º codebase_id
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases.get("active")
        
        if not codebase_id:
            await processing_msg.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã")
            return
        
        if hasattr(self.file_manager, 'ai_interface') and self.file_manager.ai_interface:
            if user_id not in self.handler.pending_files:
                self.handler.pending_files[user_id] = []
            
            token = secrets.token_urlsafe(8)
            self.handler.pending_files[user_id].append({
                "kind": "image_convert",
                "token": token,
                "file_name": filename,
                "file_size": photo.file_size or len(file_bytes),
                "file_data": file_bytes,
                "codebase_id": codebase_id
            })
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI", callback_data=f"conv:{token}:ai_ocr")],
                [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"save_as:{token}:original")]
            ])
            
            ai_provider = self.get_ai_provider_name()
            size_mb = (photo.file_size or len(file_bytes)) / 1024 / 1024
            
            await processing_msg.edit_text(
                f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                f"üìè –†–∞–∑–º–µ—Ä: {photo.width}x{photo.height}\n"
                f"üíæ –û–±—ä–µ–º: {size_mb:.2f} MB\n"
                f"ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {ai_provider}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å —Å–æ —Å–ª–æ–≤–æ–º '—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç AI, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            await self._save_image_without_ocr(message, processing_msg, filename, file_bytes, user_id)

    async def _save_image_without_ocr(self, message, processing_msg, filename, file_bytes, user_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ OCR"""
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
        
        success, msg, _ = await self.file_manager.save_file(
            user_id, codebase_id, filename, file_bytes, encoding=None, skip_conversion=True
        )
        
        if success:
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            await processing_msg.edit_text(
                f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n"
                f"üìä {msg}"
            )
        else:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {msg}")
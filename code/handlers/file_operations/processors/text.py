# code/handlers/file_operations/processors/text.py
"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""
import os
import secrets
import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .base_processor import BaseProcessor

logger = logging.getLogger(__name__)


class TextFileProcessor(BaseProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    async def process_regular_file(self, message, processing_msg, document, file_bytes, 
                                  user_id, codebase_id, existing_token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        is_text = self.file_manager.is_text_file(document.file_name)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if not is_text:
            ext = os.path.splitext(document.file_name.lower())[1]
            await processing_msg.edit_text(
                f"‚ùå –¢–∏–ø —Ñ–∞–π–ª–∞ '{ext}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
                f"–§–∞–π–ª: {document.file_name}\n\n"
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt, .md, .c, .py, .js, .json, .xml –∏ –¥—Ä.)\n"
                f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (.docx, .rtf, .odt)\n"
                f"‚Ä¢ –¢–∞–±–ª–∏—Ü—ã (.xlsx, .xls, .csv)\n"
                f"‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (.pptx, .ppt)\n"
                f"‚Ä¢ PDF —Ñ–∞–π–ª—ã\n"
                f"‚Ä¢ HTML —Ñ–∞–π–ª—ã\n"
                f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (.jpg, .png, .gif –∏ –¥—Ä.)\n"
                f"‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (.mp3, .wav, .ogg, .m4a –∏ –¥—Ä.)"
            )
            return
       
        # –î–∞–ª–µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        encoding, confidence = await self.file_manager.encoding_converter.detect_encoding(file_bytes)
        selected_encoding = encoding

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
        if hasattr(self.handler, 'agent_handler') and self.handler.agent_handler:
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                if selected_encoding and selected_encoding != 'utf-8':
                    try:
                        text_content = file_bytes.decode(selected_encoding)
                    except:
                        text_content = file_bytes.decode('utf-8', errors='ignore')
                else:
                    text_content = file_bytes.decode('utf-8', errors='ignore')
        
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥
                self.handler.agent_handler.save_md_file_for_macros(
                    user_id, 
                    document.file_name,
                    text_content,
                    document.file_name
                )
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {document.file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥: {e}")
        
        if self.file_manager.encoding_converter.needs_conversion(encoding, confidence):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.handler.pending_files –≤–º–µ—Å—Ç–æ self.pending_files
            if user_id not in self.handler.pending_files:
                self.handler.pending_files[user_id] = []
            
            token = existing_token or secrets.token_urlsafe(8)
            self.handler.pending_files[user_id].append({
                "kind": "encoding_prompt",
                "token": token,
                "file_name": document.file_name,
                "file_size": document.file_size,
                "file_data": file_bytes,
            })
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"‚úÖ {encoding} (–∞–≤—Ç–æ)", callback_data=f"enc:{token}:{encoding}")],
                [InlineKeyboardButton(text="CP1251 (Windows)", callback_data=f"enc:{token}:cp1251")],
                [InlineKeyboardButton(text="CP866 (DOS)", callback_data=f"enc:{token}:cp866")],
                [InlineKeyboardButton(text="KOI8-R", callback_data=f"enc:{token}:koi8-r")],
                [InlineKeyboardButton(text="UTF-8", callback_data=f"enc:{token}:utf-8")],
            ])
            
            await processing_msg.edit_text(
                f"üì§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0%})\n"
                f"–§–∞–π–ª: {document.file_name}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
                reply_markup=keyboard
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        exists = await self.file_manager.file_exists(user_id, codebase_id, document.file_name)
        if exists:
            if user_id not in self.handler.pending_files:
                self.handler.pending_files[user_id] = []
            
            token = existing_token or secrets.token_urlsafe(8)
            self.handler.pending_files[user_id].append({
                "kind": "replace_after_encoding",
                "token": token,
                "file_name": document.file_name,
                "file_size": document.file_size,
                "file_data": file_bytes,
                "selected_encoding": selected_encoding,
            })
            
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å", callback_data=f"replace_file:{token}"),
                InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_file:{token}")
            ]])
            
            await processing_msg.edit_text(
                f"‚ö†Ô∏è –§–∞–π–ª '{document.file_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {selected_encoding or '‚Äî'}\n"
                f"–ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª?",
                reply_markup=kb
            )
            return
        
        # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        if user_id not in self.handler.pending_files:
            self.handler.pending_files[user_id] = []
        
        token = existing_token or secrets.token_urlsafe(8)
        self.handler.pending_files[user_id].append({
            "kind": "save_new_file",
            "token": token,
            "file_name": document.file_name,
            "file_size": document.file_size,
            "file_data": file_bytes,
            "selected_encoding": selected_encoding,
            "codebase_id": codebase_id,
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if document.file_size < 1024:
            size_str = f"{document.file_size} –±–∞–π—Ç"
        elif document.file_size < 1024 * 1024:
            size_str = f"{document.file_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{document.file_size / (1024 * 1024):.1f} –ú–ë"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_new_file:{token}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_new_file:{token}")
        ]])
        
        await processing_msg.edit_text(
            f"üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª: {document.file_name}\n"
            f"üìä –†–∞–∑–º–µ—Ä: {size_str}\n"
            f"üì§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞: {selected_encoding or 'UTF-8'}\n"
            f"üìö –ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞: {config['name']}\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª?",
            reply_markup=kb
        )
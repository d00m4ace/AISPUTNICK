# code/handlers/file_operations/list_handler.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
"""
import logging
from datetime import datetime
from typing import Optional
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .base import BaseFileHandler

from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)


class FileListHandler(BaseFileHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    
    async def cmd_files(self, message: types.Message, page: int = 1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ"""
        user_id = str(message.from_user.id)
    
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        if cb_info.get("is_public_ref"):
            # –î–ª—è —á—É–∂–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑ –∑–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä—è–º–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            base_name = escape_markdown_v2(config['name']) if config else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–∞"
        
            text = (
                "‚ùå *–ü—Ä—è–º–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\!*\n\n"
                f"üìÇ –ë–∞–∑–∞: {base_name}\n"
                f"üîí –°—Ç–∞—Ç—É—Å: –ß—É–∂–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /agents –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É\n"
                "‚úÖ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ RAG\\-–∏–Ω–¥–µ–∫—Å\n"
                "‚úÖ –ß–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤\n\n"
                "–í—ã –ù–ï –º–æ–∂–µ—Ç–µ:\n"
                "‚ùå –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é\n"
                "‚ùå –°–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã\n"
                "‚ùå –£–¥–∞–ª—è—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∞–π–ª—ã\n\n"
                "_–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞—â–∏—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞_"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –î–ª—è —Å–≤–æ–∏—Ö –±–∞–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        await self._show_files_page(message, page, user_id=user_id)
      
    async def handle_page_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
        page_str = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "files_page:"
    
        if page_str == "noop":
            await callback.answer()
            return
    
        try:
            page = int(page_str)
        except ValueError:
            await callback.answer()
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_id = str(callback.from_user.id)
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases.get("active")
        cb_info = user_codebases["codebases"].get(codebase_id, {}) if codebase_id else {}
        readonly = cb_info.get("is_public_ref", False)
    
        await self._show_files_page(
            callback.message,
            page,
            edit=True,
            user_id=user_id,
            readonly=readonly
        )
        await callback.answer()

    async def _show_files_page(self, message: types.Message, page: int = 1, edit: bool = False, *, user_id: Optional[str] = None, readonly: bool = False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
        uid = user_id or str(message.from_user.id)
    
        user_codebases = await self.codebase_manager.get_user_codebases(uid)
        codebase_id = user_codebases.get("active")
    
        if not codebase_id:
            txt = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /switch"
            return await (message.edit_text(txt, parse_mode="MarkdownV2") if edit else message.reply(txt, parse_mode="MarkdownV2"))
    
        config = await self.codebase_manager.get_codebase_config(uid, codebase_id)
        if not config:
            txt = "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –∑–∞–Ω–æ–≤–æ: /switch"
            return await (message.edit_text(txt, parse_mode="MarkdownV2") if edit else message.reply(txt, parse_mode="MarkdownV2"))
    
        files_data = await self.file_manager.list_files(uid, codebase_id, page, per_page=20)
        _, total_size = await self.codebase_manager.get_live_stats(uid, codebase_id)
    
        if files_data['total'] == 0:
            base_name = escape_markdown_v2(config['name'])
            text = (
                f"üìÇ *–ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞:* {base_name}\n"
                f"üìÇ *–§–∞–π–ª–æ–≤:* 0\n\n"
            )
            if readonly:
                text += "–ë–∞–∑–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞\\.\n–í–ª–∞–¥–µ–ª–µ—Ü –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª—ã\\."
            else:
                text += "–ë–∞–∑–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞\\. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\\."
            
            if edit:
                try:
                    await message.edit_text(text, parse_mode="MarkdownV2")
                except Exception:
                    await message.answer(text, parse_mode="MarkdownV2")
            else:
                await message.reply(text, parse_mode="MarkdownV2")
            return
    
        cur_page = max(1, min(files_data['page'], files_data['total_pages']))
        total_pages = files_data['total_pages']
    
        base_name = escape_markdown_v2(config['name'])
        total_files = escape_markdown_v2(str(files_data['total']))
        size_formatted = escape_markdown_v2(self.file_manager.format_size(total_size))
        cur_page_escaped = escape_markdown_v2(str(cur_page))
        total_pages_escaped = escape_markdown_v2(str(total_pages))
    
        text = (
            f"üìÇ *–ö–æ–¥–æ–≤–∞—è –±–∞–∑–∞:* {base_name}\n"
            f"üìÇ *–§–∞–π–ª–æ–≤:* {total_files} \\| "
            f"üíæ *–†–∞–∑–º–µ—Ä:* {size_formatted}\n"
            f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞* {cur_page_escaped}/{total_pages_escaped}\n\n"
        )
    
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è readonly —Ä–µ–∂–∏–º–∞
        if readonly:
            text += "‚ö†Ô∏è *–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞* \\(—á—É–∂–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞\\)\n\n"
    
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        for i, file in enumerate(files_data['files'], files_data['start_idx']):
            icon = "üìù" if file['is_text'] else "üì¶"
        
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è MarkdownV2
            name = file['name']
            # –í –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            safe_name = name.replace("`", "\\`")
            name_disp = f"`{safe_name}`"
        
            size_str = escape_markdown_v2(self.file_manager.format_size(file['size']))
        
            modified_raw = file.get("modified") or ""
            try:
                dt = datetime.fromisoformat(modified_raw)
                date_str = dt.strftime("%d.%m.%y %H:%M")
            except Exception:
                date_str = "??.??.?? --:--"
            date_str_escaped = escape_markdown_v2(date_str)
        
            idx_escaped = escape_markdown_v2(str(i))
            text += f"{idx_escaped}\\. {icon} {name_disp} {size_str} {date_str_escaped}\n"
    
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        text += "\nüìå *–ö–æ–º–∞–Ω–¥—ã:*\n"
        if readonly:
            text += "/search \\- –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
            text += "_–£–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã_"
        else:
            text += "/search \\- –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
            text += "/download \\- —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã\n"
            text += "/delete \\- —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã"
    
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = self._build_pagination_keyboard(cur_page, total_pages)
    
        if edit:
            try:
                await message.edit_text(text, reply_markup=keyboard, parse_mode="MarkdownV2")
            except Exception:
                await message.answer(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        else:
            await message.reply(text, reply_markup=keyboard, parse_mode="MarkdownV2")

    def _build_pagination_keyboard(self, cur_page: int, total_pages: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        first_page = 1
        prev_page = max(first_page, cur_page - 1)
        next_page = min(total_pages, cur_page + 1)
        last_page = total_pages
        
        kb_rows = []
        row = []
        
        if cur_page > first_page:
            row.append(InlineKeyboardButton(text="‚èÆ 1", callback_data=f"files_page:{first_page}"))
            row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"files_page:{prev_page}"))
        else:
            row.append(InlineKeyboardButton(text="‚èÆ 1", callback_data="files_page:noop"))
            row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="files_page:noop"))
        
        if cur_page < last_page:
            row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"files_page:{next_page}"))
            row.append(InlineKeyboardButton(text=f"{last_page} ‚è≠", callback_data=f"files_page:{last_page}"))
        else:
            row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="files_page:noop"))
            row.append(InlineKeyboardButton(text=f"{last_page} ‚è≠", callback_data="files_page:noop"))
        
        kb_rows.append(row)
        return InlineKeyboardMarkup(inline_keyboard=kb_rows)
# code/handlers/file_operations/search_handler.py
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
"""
import logging
from typing import List, Dict, Any
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .states import FileStates
from .base import BaseFileHandler

from utils.markdown_utils import escape_markdown_v2

logger = logging.getLogger(__name__)

class FileSearchHandler(BaseFileHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, bot, user_manager, codebase_manager, file_manager):
        super().__init__(bot, user_manager, codebase_manager, file_manager)
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.search_results = {}  # {user_id: {'files': [...], 'pattern': '...'}}
    
    async def cmd_search_files(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤"""
        user_id = str(message.from_user.id)
    
        if not await self.user_manager.is_active(user_id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\\.", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        if not user_codebases["active"]:
            text = (
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã\\.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∫–æ–º–∞–Ω–¥–æ–π /switch"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –±–∞–∑
        codebase_id = user_codebases["active"]
        cb_info = user_codebases["codebases"].get(codebase_id, {})
    
        if cb_info.get("is_public_ref"):
            config = await self.codebase_manager.get_codebase_config(user_id, codebase_id)
            base_name = escape_markdown_v2(config['name']) if config else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∞–∑–∞"
        
            text = (
                "‚ùå *–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\\!*\n\n"
                f"üìÇ –ë–∞–∑–∞: {base_name}\n"
                f"üîí –°—Ç–∞—Ç—É—Å: –ß—É–∂–∞—è –ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞\n\n"
                "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚úÖ /agents \\- –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫\n"
                "‚úÖ RAG\\-–∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞\n\n"
                "–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\\.\n"
                "_–≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞\\._"
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        text = (
            "üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "\\(–∏–ª–∏ /cancel\\_file\\_job –¥–ª—è –æ—Ç–º–µ–Ω—ã\\)"
        )
        await message.reply(text, parse_mode="MarkdownV2")
        await state.set_state(FileStates.searching_files)
    
    async def process_file_search(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        user_id = str(message.from_user.id)
        pattern = message.text.strip()
    
        if pattern.lower() == "/cancel_file_job":
            await state.clear()
            await message.reply("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω\\.", parse_mode="MarkdownV2")
            return
    
        if not pattern:
            await message.reply("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", parse_mode="MarkdownV2")
            return
    
        user_codebases = await self.codebase_manager.get_user_codebases(user_id)
        codebase_id = user_codebases["active"]
    
        files = await self.file_manager.search_files(user_id, codebase_id, pattern)
    
        if not files:
            pattern_escaped = escape_markdown_v2(pattern)
            text = (
                f"‚ùå –§–∞–π–ª—ã —Å '{pattern_escaped}' –≤ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ /cancel\\_file\\_job –¥–ª—è –æ—Ç–º–µ–Ω—ã\\."
            )
            await message.reply(text, parse_mode="MarkdownV2")
            return
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.search_results[user_id] = {
            'files': files,
            'pattern': pattern,
            'codebase_id': codebase_id
        }
    
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        files_count = escape_markdown_v2(str(len(files)))
        pattern_escaped = escape_markdown_v2(pattern)
    
        text = f"üîç *–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:* {files_count}\n"
        text += f"üìù *–ó–∞–ø—Ä–æ—Å:* '{pattern_escaped}'\n\n"
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤
        for i, file in enumerate(files[:20], 1):
            icon = "üìù" if file['is_text'] else "üì¶"
            name_escaped = escape_markdown_v2(file['name'])
            size_escaped = escape_markdown_v2(self.file_manager.format_size(file['size']))
            idx_escaped = escape_markdown_v2(str(i))
            text += f"{idx_escaped}\\. {icon} {name_escaped} \\({size_escaped}\\)\n"
    
        if len(files) > 20:
            remaining = escape_markdown_v2(str(len(files) - 20))
            text += f"\n\\.\\.\\. –∏ –µ—â–µ {remaining} —Ñ–∞–π–ª–æ–≤"
    
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = self._create_search_actions_keyboard(len(files))
    
        await message.reply(text, reply_markup=keyboard, parse_mode="MarkdownV2")
        await state.clear()
  
    def _create_search_actions_keyboard(self, files_count: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if files_count <= 10:
            buttons.append([
                InlineKeyboardButton(
                    text=f"üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ ({files_count} —Ñ–∞–π–ª–æ–≤)",
                    callback_data="search_download:all"
                )
            ])
        else:
            buttons.append([
                InlineKeyboardButton(
                    text="üì• –°–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10",
                    callback_data="search_download:first10"
                )
            ])
            if files_count > 5:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üì¶ –°–∫–∞—á–∞—Ç—å –≤—Å–µ –≤ ZIP ({files_count} —Ñ–∞–π–ª–æ–≤)",
                        callback_data="search_download:zip"
                    )
                ])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        buttons.append([
            InlineKeyboardButton(
                text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ({files_count} —Ñ–∞–π–ª–æ–≤)",
                callback_data="search_delete:confirm"
            )
        ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_action:new"),
            InlineKeyboardButton(text="üìÇ –í—Å–µ —Ñ–∞–π–ª—ã", callback_data="search_action:list")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    
    async def handle_search_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –ø–æ–∏—Å–∫–∞"""
        user_id = str(callback.from_user.id)
        action_type, action = callback.data.split(":", 1)
        
        if action_type == "search_download":
            await self._handle_download_action(callback, action)
        elif action_type == "search_delete":
            await self._handle_delete_action(callback, action)
        elif action_type == "search_action":
            await self._handle_navigation_action(callback, action, state)
        
        await callback.answer()
    
    async def _handle_download_action(self, callback: types.CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        user_id = str(callback.from_user.id)
        
        if user_id not in self.search_results:
            await callback.message.edit_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return
        
        search_data = self.search_results[user_id]
        files = search_data['files']
        codebase_id = search_data['codebase_id']
        
        await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...")
        
        if action == "all":
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã (–¥–æ 10)
            files_to_download = [f['name'] for f in files[:10]]
            await self._send_files(callback.message, user_id, codebase_id, files_to_download)
            
        elif action == "first10":
            # –°–∫–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            files_to_download = [f['name'] for f in files[:10]]
            await self._send_files(callback.message, user_id, codebase_id, files_to_download)
            
        elif action == "zip":
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            await self._send_files_as_zip(callback.message, user_id, codebase_id, files)
    

    async def _handle_delete_action(self, callback: types.CallbackQuery, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–¥–∞–ª–µ–Ω–∏—è"""
        user_id = str(callback.from_user.id)
    
        if user_id not in self.search_results:
            text = "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏\\. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ\\."
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
            return
    
        search_data = self.search_results[user_id]
        files = search_data['files']
        pattern = search_data['pattern']
    
        if action == "confirm":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="search_delete:execute"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="search_delete:cancel")
                ]
            ])
        
            files_count = escape_markdown_v2(str(len(files)))
            pattern_escaped = escape_markdown_v2(pattern)
        
            text = (
                f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
                f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã {files_count} —Ñ–∞–π–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É '{pattern_escaped}'\\.\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\\!\n\n"
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
            )
            await callback.message.edit_text(text, reply_markup=kb, parse_mode="MarkdownV2")
        
        elif action == "execute":
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            codebase_id = search_data['codebase_id']
            files_to_delete = [f['name'] for f in files]
        
            await callback.message.edit_text("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\\.\\.\\.", parse_mode="MarkdownV2")
        
            deleted, total = await self.file_manager.delete_files(
                user_id, codebase_id, files_to_delete
            )
        
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            del self.search_results[user_id]
        
            deleted_escaped = escape_markdown_v2(str(deleted))
            total_escaped = escape_markdown_v2(str(total))
        
            text = (
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_escaped}/{total_escaped}\n\n"
                f"/files ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤\n"
                f"/search ‚Äî –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
            )
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
        
        elif action == "cancel":
            # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            files_count = escape_markdown_v2(str(len(files)))
            pattern_escaped = escape_markdown_v2(pattern)
        
            text = f"üîç *–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:* {files_count}\n"
            text += f"üìù *–ó–∞–ø—Ä–æ—Å:* '{pattern_escaped}'\n\n"
        
            for i, file in enumerate(files[:20], 1):
                icon = "üìù" if file['is_text'] else "üì¶"
                name_escaped = escape_markdown_v2(file['name'])
                size_escaped = escape_markdown_v2(self.file_manager.format_size(file['size']))
                idx_escaped = escape_markdown_v2(str(i))
                text += f"{idx_escaped}\\. {icon} {name_escaped} \\({size_escaped}\\)\n"
        
            if len(files) > 20:
                remaining = escape_markdown_v2(str(len(files) - 20))
                text += f"\n\\.\\.\\. –∏ –µ—â–µ {remaining} —Ñ–∞–π–ª–æ–≤"
        
            keyboard = self._create_search_actions_keyboard(len(files))
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="MarkdownV2")

    async def _handle_navigation_action(self, callback: types.CallbackQuery, action: str, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if action == "new":
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
            text = (
                "üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                "\\(–∏–ª–∏ /cancel\\_file\\_job –¥–ª—è –æ—Ç–º–µ–Ω—ã\\)"
            )
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
            await state.set_state(FileStates.searching_files)
        
        elif action == "list":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            text = "üìÇ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /files –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
            await callback.message.edit_text(text, parse_mode="MarkdownV2")
   
   
    async def _send_files(self, message: types.Message, user_id: str, codebase_id: str, filenames: List[str]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        sent = 0
        not_sent = []
    
        for filename in filenames:
            file_data = await self.file_manager.get_file(user_id, codebase_id, filename)
            if file_data:
                try:
                    await message.reply_document(
                        types.BufferedInputFile(file_data, filename),
                        caption=f"üìé {filename}"
                    )
                    sent += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                    not_sent.append(filename)
    
        sent_escaped = escape_markdown_v2(str(sent))
        total_escaped = escape_markdown_v2(str(len(filenames)))
    
        result_msg = f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_escaped}/{total_escaped}"
        if not_sent:
            result_msg += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            for f in not_sent:
                result_msg += f"‚Ä¢ {escape_markdown_v2(f)}\n"
        result_msg += "\n\n/search \\- –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\n/files \\- —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
    
        await message.reply(result_msg, parse_mode="MarkdownV2")
    
    async def _send_files_as_zip(self, message: types.Message, user_id: str, codebase_id: str, files: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ –≤–∏–¥–µ ZIP –∞—Ä—Ö–∏–≤–∞"""
        import io
        import re
        from zipfile import ZipFile, ZIP_DEFLATED
        
        buf = io.BytesIO()
        total_count = len(files)
        
        with ZipFile(buf, "w", ZIP_DEFLATED) as zf:
            for f in files:
                file_name = f['name']
                file_bytes = await self.file_manager.get_file(user_id, codebase_id, file_name)
                if file_bytes is None:
                    continue
                zf.writestr(file_name, file_bytes)
        
        buf.seek(0)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞
        search_data = self.search_results.get(user_id, {})
        pattern = search_data.get('pattern', 'search')
        safe_pattern = re.sub(r'[^A-Za-z0-9_\-]+', '_', pattern).strip('_')[:20] or "search"
        zip_name = f"search_{safe_pattern}_{total_count}files.zip"
        
        try:
            await message.reply_document(
                types.BufferedInputFile(buf.read(), zip_name),
                caption=f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{pattern}' ({total_count} —Ñ–∞–π–ª–æ–≤)"
            )
            await message.reply(
                "‚úÖ –ê—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "/search - –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\n"
                "/files - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ {zip_name}: {e}")
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.")
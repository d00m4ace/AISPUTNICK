# code/handlers/agent_handlers/macro_handler.py

import os
import re
import logging
from datetime import datetime
from aiogram import types
from aiogram.types import BufferedInputFile
from utils.markdown_utils import escape_markdown_v2

from time import perf_counter
from user_activity_logger import activity_logger

logger = logging.getLogger(__name__)

class MacroCommandHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, parent_handler):
        self.parent = parent_handler
        self.bot = parent_handler.bot
        self.last_md_files = {}
        
    async def handle_macro_command(self, message: types.Message, user_id: str, 
                                   macro_text: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            macro_text: –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ @ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –º–∞–∫—Ä–æ—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        """
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–º—è –º–∞–∫—Ä–æ—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        parts = macro_text.split(None, 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
        macro_name = parts[0].lower()
        additional_query = parts[1] if len(parts) > 1 else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥–µ
        macro = self.parent.macro_commands.get_command(macro_name)
        if not macro:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É help –¥–ª—è –º–∞–∫—Ä–æ—Å–æ–≤
            if macro_name == 'macros' or macro_name == 'macro':
                await self._show_macro_help(message)
                return True
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        if user_id not in self.last_md_files:
            await message.reply(
                "‚ö†Ô∏è *–ù–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª:\n"
                "‚Ä¢ PDF ‚Üí Markdown\n"
                "‚Ä¢ –ê—É–¥–∏–æ ‚Üí –¢–µ–∫—Å—Ç\n"
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –¢–µ–∫—Å—Ç \\(OCR\\)\n"
                "‚Ä¢ HTML ‚Üí Markdown\n"
                "‚Ä¢ –¢–∞–±–ª–∏—Ü—ã ‚Üí Markdown\n\n"
                "–ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—ã",
                parse_mode="MarkdownV2"
            )
            return True
        
        last_file = self.last_md_files[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ (–Ω–µ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤)
        time_diff = datetime.now() - last_file['timestamp']
        if time_diff.total_seconds() > 7200:  # 2 —á–∞—Å–∞
            hours_ago = int(time_diff.total_seconds()/3600)
            await message.reply(
                f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª \\(–æ–±—Ä–∞–±–æ—Ç–∞–Ω {hours_ago} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\\)\n"
                f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                parse_mode="MarkdownV2"
            )
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º filejob –∞–≥–µ–Ω—Ç–∞
        if 'filejob' not in self.parent.system_agents:
            await message.reply("‚ö†Ô∏è –ê–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", parse_mode="MarkdownV2")
            return True
        
        filejob_agent = self.parent.system_agents['filejob']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        base_query = macro['query']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if additional_query:
            final_query = f"{base_query}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {additional_query}"
            logger.info(f"–ú–∞–∫—Ä–æ {macro_name} —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º: {additional_query}")
        else:
            final_query = base_query
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        file_type = last_file.get('file_type', 'text')
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥ —Ç–∏–ø —Ñ–∞–π–ª–∞
        if file_type == 'code':
            context_prefix = "–≠—Ç–æ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º. "
        elif file_type == 'config':
            context_prefix = "–≠—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª. "
        elif file_type == 'markdown':
            context_prefix = "–≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. "
        else:
            context_prefix = ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        enhanced_query = context_prefix + final_query
        
        virtual_filename = f"content_{last_file['filename']}"
        filejob_query = f"{virtual_filename}\n{enhanced_query}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        info_text = f"üìÑ *–í—ã–ø–æ–ª–Ω—è—é –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—É @{escape_markdown_v2(macro['name'])}*\n\n"
        info_text += f"üìÑ –§–∞–π–ª: `{escape_markdown_v2(last_file['filename'])}`\n"
        info_text += f"üìù –¢–∏–ø: {escape_markdown_v2(file_type)}\n"
        info_text += f"üìä –†–∞–∑–º–µ—Ä: {escape_markdown_v2(str(len(last_file['content'])))} —Å–∏–º–≤–æ–ª–æ–≤\n"
        
        if additional_query:
            truncated = additional_query[:50] + ('...' if len(additional_query) > 50 else '')
            info_text += f"‚ûï –î–æ–ø\\. –∑–∞–ø—Ä–æ—Å: _{escape_markdown_v2(truncated)}_\n"
        
        info_text += f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\\.\\.\\."
        
        processing_msg = await message.reply(
            info_text,
            parse_mode="MarkdownV2"
        )
        
        try:
            activity_logger.log(user_id, "MACRO_START", f"name={macro_name},file={last_file['filename']},add_query_len={len(additional_query)}")
            t0 = perf_counter()

            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
            context = {
                'codebase_manager': self.parent.codebase_manager,
                'file_manager': self.parent.file_manager,
                'ai_interface': self.parent.ai_interface,
                'user_manager': self.parent.user_manager,
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                'virtual_files': {
                    virtual_filename: last_file['content']
                }
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ filejob –∞–≥–µ–Ω—Ç–∞
            result = await filejob_agent.process(user_id, filejob_query, context)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(result, tuple) and len(result) >= 2:
                success = result[0]
                if len(result) == 3:
                    status_msg, final_result = result[1], result[2]
                else:
                    status_msg, final_result = result[1], None
            else:
                success, status_msg, final_result = False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", None
            
            await processing_msg.delete()

            duration = perf_counter() - t0
            activity_logger.log(user_id, "MACRO_END", f"name={macro_name},success={bool(success and final_result)},duration={duration:.2f}s")
            
            if success and final_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                result_filename = f"{macro['name']}_{last_file['original_filename']}.txt"
                self.parent.save_md_file_for_macros(
                    user_id,
                    result_filename,
                    final_result,
                    last_file['original_filename']
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = f"# –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—ã @{macro['name']}\n\n"
                file_content += f"**–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:** {last_file['filename']}\n"
                file_content += f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:** {last_file['original_filename']}\n"
                file_content += f"**–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                file_content += f"**–ö–æ–º–∞–Ω–¥–∞:** {macro['description']}\n"
                
                if additional_query:
                    file_content += f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:** {additional_query}\n"
                
                file_content += "\n---\n\n"
                file_content += final_result
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ñ–∞–π–ª
                file_bytes = file_content.encode('utf-8')
                output_filename = f"{macro['name']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                input_file = BufferedInputFile(
                    file=file_bytes,
                    filename=output_filename
                )
                
                caption = f"‚úÖ *–ú–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥–∞ @{escape_markdown_v2(macro['name'])} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞*\n\n"
                caption += f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π: `{escape_markdown_v2(last_file['filename'])}`\n"
                caption += f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: `{escape_markdown_v2(output_filename)}`\n"
                
                if additional_query:
                    truncated = additional_query[:30] + ('...' if len(additional_query) > 30 else '')
                    caption += f"‚ûï –° —É—á–µ—Ç–æ–º: _{escape_markdown_v2(truncated)}_\n"
                
                caption += f"\nüí° _–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É_"
                
                await message.reply_document(
                    document=input_file,
                    caption=caption,
                    parse_mode="MarkdownV2"
                )
                
            else:
                error_msg = f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—ã*\n\n{escape_markdown_v2(status_msg)}"
                await message.reply(error_msg, parse_mode="MarkdownV2")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—ã {macro_name}: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await message.reply(
                f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n`{escape_markdown_v2(str(e))}`",
                parse_mode="MarkdownV2"
            )
        
        return True
    
    async def _show_macro_help(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–∞–∫—Ä–æ-–∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = "*üìã –ë—ã—Å—Ç—Ä—ã–µ –º–∞–∫—Ä–æ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤*\n"
        help_text += "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:_\n\n"
        
        all_commands = self.parent.macro_commands.get_all_commands()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        text_commands = ['sum', 'analyze', 'translate', 'translate_ru', 'keywords', 
                        'questions', 'outline', 'improve', 'explain', 'tasks', 'entities']
        code_commands = ['code', 'refactor', 'comment', 'tests', 'security', 
                        'readme', 'api', 'clean', 'extract']
        
        help_text += "*üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n"
        for cmd_name in text_commands:
            if cmd_name in all_commands:
                cmd_info = all_commands[cmd_name]
                help_text += f"‚Ä¢ `@{cmd_name}` \\- {escape_markdown_v2(cmd_info['description'])}\n"
        
        help_text += "\n*üíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞:*\n"
        for cmd_name in code_commands:
            if cmd_name in all_commands:
                cmd_info = all_commands[cmd_name]
                help_text += f"‚Ä¢ `@{cmd_name}` \\- {escape_markdown_v2(cmd_info['description'])}\n"
        
        help_text += "\nüí° *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        help_text += "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É\n"
        help_text += "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        help_text += "  `@sum —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏`\n"
        help_text += "  `@translate –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫`\n"
        help_text += "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π —Ñ–∞–π–ª\n"
        help_text += "‚Ä¢ –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É"
        
        await message.reply(help_text, parse_mode="MarkdownV2")
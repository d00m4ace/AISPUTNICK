# code/handlers/agent_handlers/chat_handler.py

import logging
from datetime import datetime
from typing import Dict, Any, Tuple
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile
from utils.markdown_utils import escape_markdown_v2
from utils.info_utils import info_welcome_chat_message, info_cmd_chat_message, info_chat_help_message

from time import perf_counter
from user_activity_logger import activity_logger

logger = logging.getLogger(__name__)

class ChatStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç –∞–≥–µ–Ω—Ç–∞–º–∏"""
    active_chat = State()

class ChatAgentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç-–∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, parent_handler):
        self.parent = parent_handler
        self.bot = parent_handler.bot
        self.active_chat_sessions = {}
        self.user_file_contexts = {}
        
    async def activate_chat_mode(self, message: types.Message, state: FSMContext,
                                 user_id: str, agent_name: str, initial_query: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç-—Ä–µ–∂–∏–º–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏"""
        self.active_chat_sessions[user_id] = {
            'agent_name': agent_name,
            'started_at': datetime.now().isoformat()
        }
        
        await state.set_state(ChatStates.active_chat)
        
        agent = await self.parent._get_agent_instance(user_id, agent_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–≥–µ–Ω—Ç–∞
        history_info = ""
        file_info = ""
        
        if agent and hasattr(agent, 'get_config'):
            config = agent.get_config()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—Ä–∏–∏
            if config.get('history', {}).get('enabled', False):
                history_config = config.get('history', {})
                history_info = "\n\nüìÑ *–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:* ‚úÖ *–í–∫–ª—é—á–µ–Ω–∞*"
                history_info += f" \\(–º–∞–∫—Å\\. {escape_markdown_v2(str(history_config.get('max_messages', 20)))} —Å–æ–æ–±—â–µ–Ω–∏–π\\)"
                
                if history_config.get('clear_files_on_history_clear', True):
                    history_info += "\n‚Ä¢ –ü—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏ —Ñ–∞–π–ª—ã"
                    
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
            file_config = config.get('file_context', {})
            if file_config.get('enabled', True):
                file_info = "\nüìé *–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:*"
                
                multi_mode = file_config.get('multi_file_mode', 'merge')
                if multi_mode == 'merge':
                    file_info += "\n‚Ä¢ üìö *–†–µ–∂–∏–º:* –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
                    file_info += "\n‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤"
                    file_info += "\n‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç"
                else:
                    file_info += "\n‚Ä¢ üìÑ *–†–µ–∂–∏–º:* —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª"
                    file_info += "\n‚Ä¢ –ù–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π"
                
                max_size = file_config.get('max_content_length', 200000)
                if max_size >= 1024*1024:
                    size_str = f"{max_size/(1024*1024):.1f} –ú–ë"
                elif max_size >= 1024:
                    size_str = f"{max_size/1024:.0f} –ö–ë"
                else:
                    size_str = f"{max_size} —Å–∏–º–≤–æ–ª–æ–≤"
                file_info += f"\n‚Ä¢ –ú–∞–∫—Å\\. —Ä–∞–∑–º–µ—Ä: {escape_markdown_v2(size_str)}"
                
        welcome_msg = info_welcome_chat_message(escape_markdown_v2(agent_name))
        
        if file_info:
            welcome_msg += file_info
        
        if history_info:
            welcome_msg += history_info
            welcome_msg += "\n\n" + info_cmd_chat_message()

        welcome_msg += "\n" + info_chat_help_message()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if hasattr(agent, 'get_user_files_info'):
            files_info = agent.get_user_files_info(user_id)
            if files_info['files_count'] > 0:
                welcome_msg += f"\n\nüìÇ *–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:* {files_info['files_count']}"
                if files_info['total_size'] >= 1024*1024:
                    size_str = f"{files_info['total_size']/(1024*1024):.1f} –ú–ë"
                elif files_info['total_size'] >= 1024:
                    size_str = f"{files_info['total_size']/1024:.1f} –ö–ë"
                else:
                    size_str = f"{files_info['total_size']} –±–∞–π—Ç"
                welcome_msg += f"\nüìä *–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:* {escape_markdown_v2(size_str)}"
                
        await message.reply(welcome_msg, parse_mode="MarkdownV2")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if initial_query:
            await self.process_chat_query(message, state, user_id, agent_name, initial_query)
            
    async def process_chat_query(self, original_message: types.Message, state: FSMContext,
                                 user_id: str, agent_name: str, query_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç-—Ä–µ–∂–∏–º–µ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        if user_id not in self.active_chat_sessions:
            await state.clear()
            await original_message.reply(
                "–ß–∞—Ç —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @chat –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞\\.",
                parse_mode="MarkdownV2"
            )
            return
        
        session = self.active_chat_sessions[user_id]
        agent_name = session.get('agent_name', agent_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = await self.parent._get_agent_instance(user_id, agent_name)
        if not agent:
            await original_message.reply(
                f"‚ùå –ê–≥–µ–Ω—Ç @{escape_markdown_v2(agent_name)} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="MarkdownV2"
            )
            await state.clear()
            del self.active_chat_sessions[user_id]
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = {
            'codebase_manager': self.parent.codebase_manager,
            'file_manager': self.parent.file_manager,
            'ai_interface': self.parent.ai_interface,
            'user_manager': self.parent.user_manager
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.user_file_contexts:
            context['last_file_content'] = self.user_file_contexts[user_id]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç –∞–≥–µ–Ω—Ç–∞
        processing_msg = await original_message.reply(f"üí≠ *@{escape_markdown_v2(agent_name)}* –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å\\.\\.\\.", parse_mode="MarkdownV2")
        
        t0 = perf_counter()
        activity_logger.log(user_id, "AGENT_CALL_START", f"agent={agent_name},type=chat,query_len={len(query_text)}")

        try:
            success, response = await agent.process(user_id, query_text, context)
            
            duration = perf_counter() - t0
            activity_logger.log(user_id, "AGENT_CALL_END", f"agent={agent_name},type=chat,success={success},duration={duration:.2f}s,response_len={len(response) if isinstance(response,str) else 0}")

            await processing_msg.delete()
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                if len(response) > 4000:
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º
                    file_content = f"# –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ @{agent_name}\n\n"
                    file_content += f"**–ó–∞–ø—Ä–æ—Å:** {query_text}\n\n"
                    file_content += f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    file_content += "---\n\n"
                    clean_response = response.replace("\\", "")
                    file_content += clean_response
                    
                    file_bytes = file_content.encode('utf-8')
                    input_file = BufferedInputFile(
                        file=file_bytes,
                        filename=f"chat_response_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                    )
                    
                    await original_message.reply_document(
                        document=input_file,
                        caption="üí¨ –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª",
                        parse_mode=None
                    )
                else:
                    try:
                        await original_message.reply(response, parse_mode="MarkdownV2")
                    except:
                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        await original_message.reply(response.replace("\\", ""), parse_mode=None)
            else:
                await original_message.reply(response, parse_mode="MarkdownV2")
                
        except Exception as e:
            duration = perf_counter() - t0
            activity_logger.log(user_id, "AGENT_CALL_ERROR", f"agent={agent_name},type=chat,error={str(e)},duration={duration:.2f}s")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å –∞–≥–µ–Ω—Ç–æ–º {agent_name}: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await original_message.reply(
                f"‚ùå –û—à–∏–±–∫–∞: {escape_markdown_v2(str(e))}",
                parse_mode="MarkdownV2"
            )
            
    async def handle_chat_document(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç-—Ä–µ–∂–∏–º–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        user_id = str(message.from_user.id)
        
        if not message.document:
            return
        
        if user_id not in self.active_chat_sessions:
            await state.clear()
            return
        
        from config import Config
        if not Config.is_text_file(message.document.file_name):
            await message.reply("‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\\.", parse_mode="MarkdownV2")
            return
        
        session = self.active_chat_sessions[user_id]
        agent_name = session.get('agent_name', 'chat')
        
        agent = await self.parent._get_agent_instance(user_id, agent_name)
        if not agent:
            await message.reply(f"‚ùå –ê–≥–µ–Ω—Ç @{escape_markdown_v2(agent_name)} –Ω–µ –Ω–∞–π–¥–µ–Ω", parse_mode="MarkdownV2")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        config = agent.get_config()
        file_config = config.get('file_context', {})
        max_file_size = file_config.get('max_content_length', 200000)
        multi_file_mode = file_config.get('multi_file_mode', 'merge')
        
        processing_msg = await message.reply(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –¥–ª—è —á–∞—Ç–∞\\.\\.\\.", parse_mode="MarkdownV2")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file = await self.bot.get_file(message.document.file_id)
            file_data = await self.bot.download_file(file.file_path)
            
            if hasattr(file_data, 'getvalue'):
                file_bytes = file_data.getvalue()
            else:
                file_bytes = file_data
            
            try:
                content = file_bytes.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    content = file_bytes.decode('cp1251')
                except:
                    content = file_bytes.decode('latin-1')
                    
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞
            if hasattr(agent, 'add_file_context'):
                file_info = agent.add_file_context(user_id, message.document.file_name, content)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                merged_context = agent.get_merged_file_context(user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
                self.user_file_contexts[user_id] = merged_context
                
                try:
                    await processing_msg.delete()
                except:
                    pass
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if file_info['mode'] == 'merge':
                    if file_info['files_count'] > 1:
                        info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\.\n"
                        info_msg += f"üìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: *{file_info['files_count']}*\n"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏
                        if file_info['total_size'] >= 1024*1024:
                            size_mb = file_info['total_size']/(1024*1024)
                            size_str = f"{size_mb:.1f} –ú–ë"
                        elif file_info['total_size'] >= 1024:
                            size_kb = file_info['total_size']/1024
                            size_str = f"{size_kb:.1f} –ö–ë"
                        else:
                            size_str = f"{file_info['total_size']} –±–∞–π—Ç"
                        
                        info_msg += f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: *{escape_markdown_v2(size_str)}*"
                        
                        if file_info['total_size'] < file_info['total_original_size']:
                            original_mb = file_info['total_original_size'] / (1024*1024)
                            info_msg += f"\n‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ —Å {escape_markdown_v2(f'{original_mb:.1f}')} –ú–ë –¥–æ –ª–∏–º–∏—Ç–∞ –∞–≥–µ–Ω—Ç–∞"
                        
                        info_msg += "\n\nüí¨ *–†–µ–∂–∏–º:* –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"
                        info_msg += "\nüìÑ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò"
                    else:
                        info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\."
                        if file_info['truncated']:
                            info_msg += f"\n‚ö†Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {escape_markdown_v2(str(max_file_size))} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑\\-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞\\."
                else:  # mode == 'last'
                    info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –∑–∞–º–µ–Ω–∏–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\\."
                    info_msg += "\n\nüí¨ *–†–µ–∂–∏–º:* –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª"
                    if file_info['truncated']:
                        info_msg += f"\n‚ö†Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {escape_markdown_v2(str(max_file_size))} —Å–∏–º–≤–æ–ª–æ–≤\\."
                    
                info_msg += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞\\(–æ–≤\\)\\."
                
                await message.reply(info_msg, parse_mode="MarkdownV2")
            else:
                # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                if len(content) > max_file_size:
                    content = content[:max_file_size]
                    truncated = True
                else:
                    truncated = False
                
                self.user_file_contexts[user_id] = {
                    'filename': message.document.file_name,
                    'content': content
                }
                
                try:
                    await processing_msg.delete()
                except:
                    pass
                
                info_msg = f"‚úÖ –§–∞–π–ª *{escape_markdown_v2(message.document.file_name)}* –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞\\."
                if truncated:
                    info_msg += f"\n‚ö†Ô∏è –§–∞–π–ª –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –¥–æ {escape_markdown_v2(str(max_file_size))} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑\\-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞\\."
                info_msg += "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞\\."
                
                await message.reply(info_msg, parse_mode="MarkdownV2")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {escape_markdown_v2(str(e))}", parse_mode="MarkdownV2")
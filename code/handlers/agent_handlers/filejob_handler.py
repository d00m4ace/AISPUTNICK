# code/handlers/agent_handlers/filejob_handler.py
import os
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from utils.markdown_utils import escape_markdown_v2

from time import perf_counter
from user_activity_logger import activity_logger

logger = logging.getLogger(__name__)

class FilejobAgentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è filejob –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, parent_handler):
        self.parent = parent_handler
        self.bot = parent_handler.bot
        
    def has_active_jobs(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for job_id, job_info in self.parent.system_agents.get('filejob', {}).active_jobs.items():
            if job_info['user_id'] == user_id and not job_info.get('cancelled', False):
                return True
        return False

    async def process_fileworker_agent(self, message: types.Message, user_id: str,
                                       agent_name: str, query: str, agent, cont=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ fileworker —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã"""
    
        if not query:
            help_text = f"""@{agent_name} - –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤

    –§–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    @filejob —Å–µ–ª–µ–∫—Ç–æ—Ä_—Ñ–∞–π–ª–æ–≤
    –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É —Ñ–∞–π–ª—É

    –ü—Ä–∏–º–µ—Ä—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤:
    - * - –≤—Å–µ —Ñ–∞–π–ª—ã
    - *.py - –≤—Å–µ Python —Ñ–∞–π–ª—ã
    - 1,3,5 - —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ 1, 3 –∏ 5
    - 2-10 - —Ñ–∞–π–ª—ã —Å 2 –ø–æ 10
    - test_*.js - —Ñ–∞–π–ª—ã –ø–æ –º–∞—Å–∫–µ
    - main.py, utils.py - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã

    –ü—Ä–∏–º–µ—Ä:
    @filejob *.py
    –ù–∞–π–¥–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç"""
        
            await message.reply(help_text, parse_mode=None)
            return
    
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π job_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        job_id = f"{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", callback_data=f"cancel_job_{job_id}")
        ]])
    
        progress_msg = await message.reply(
            "üìÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤...\n\n"
            "–ê–Ω–∞–ª–∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞...",
            reply_markup=cancel_button
        )
    
        try:
            context = {
                'codebase_manager': self.parent.codebase_manager,
                'file_manager': self.parent.file_manager,
                'ai_interface': self.parent.ai_interface,
                'user_manager': self.parent.user_manager,
                'message': message  # –ü–µ—Ä–µ–¥–∞–µ–º message –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞
            }

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            if cont:
                context.update(cont)
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º job_id –≤ –∞–≥–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            agent.current_job_id = job_id

            activity_logger.log(user_id, "AGENT_CALL_START", f"agent={agent_name},type=fileworker,job_id={job_id}")
            t0 = perf_counter()
        
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
            async def process_with_progress():
                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    result = await agent.process(user_id, query, context)
                
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if isinstance(result, tuple) and len(result) >= 2:
                        success = result[0]
                        status_msg = result[1]
                        # –¢—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Ç–µ–º –∫ –∞—Ä—Ö–∏–≤—É, —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ None
                        third_element = result[2] if len(result) > 2 else None
                        return success, status_msg, third_element
                    else:
                        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞", None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ process_with_progress: {e}")
                    return False, str(e), None
        
            # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress():
                try:
                    # –ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ active_jobs
                    wait_count = 0
                    while job_id not in agent.active_jobs and wait_count < 10:
                        await asyncio.sleep(0.5)
                        wait_count += 1
                
                    if job_id not in agent.active_jobs:
                        logger.warning(f"–ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ active_jobs")
                        return
                
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    while job_id in agent.active_jobs:
                        job_status = agent.get_job_status(job_id)
                    
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
                        if not job_status or job_status.get('cancelled'):
                            logger.debug(f"–ó–∞–¥–∞—á–∞ {job_id} –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
                            break
                    
                        processed = job_status.get('processed', 0)
                        files = job_status.get('files', [])
                        total = len(files)
                        status = job_status.get('status', 'processing')
                    
                        if total == 0:
                            progress_text = "üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ..."
                        else:
                            progress_text = f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤\n\n"
                            progress_text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total} —Ñ–∞–π–ª–æ–≤\n"
                        
                            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            progress_percent = int((processed / total) * 100) if total > 0 else 0
                            progress_bar_length = 20
                            filled = int(progress_bar_length * progress_percent / 100)
                            bar = '‚ñà' * filled + '‚ñë' * (progress_bar_length - filled)
                            progress_text += f"\n[{bar}] {progress_percent}%\n"
                        
                            # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                            if processed > 0 and processed <= total:
                                current_file = files[min(processed - 1, total - 1)]
                                progress_text += f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {current_file}"
                        
                            # –°—Ç–∞—Ç—É—Å
                            if status == 'loading':
                                progress_text += "\n\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤..."
                            elif status == 'processing':
                                progress_text += "\n\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò..."
                            elif status == 'archiving':
                                progress_text += "\n\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..."
                    
                        try:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ù–ï –æ—Ç–º–µ–Ω–µ–Ω–∞
                            if not job_status.get('cancelled'):
                                await progress_msg.edit_text(
                                    progress_text,
                                    reply_markup=cancel_button
                                )
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    
                        await asyncio.sleep(2)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
                except asyncio.CancelledError:
                    logger.debug(f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è {job_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ update_progress: {e}")
                    return
        
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            process_task = asyncio.create_task(process_with_progress())
            progress_task = asyncio.create_task(update_progress())
        
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            result = await process_task

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result:
                success, status_msg, third_element = result
                logger.info(f"FilejobAgent –≤–µ—Ä–Ω—É–ª: success={success}")
            else:
                success = False
                status_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                third_element = None
                logger.error("FilejobAgent –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
            # –û—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task.cancel()
            try:
                await progress_task
            except asyncio.CancelledError:
                pass
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result:
                success, status_msg, third_element = result
            else:
                success = False
                status_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                third_element = None
        
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            try:
                await progress_msg.delete()
            except:
                pass
        
            duration = perf_counter() - t0
            activity_logger.log(user_id, "AGENT_CALL_END", 
                               f"agent={agent_name},type=fileworker,job_id={job_id},success={success},duration={duration:.2f}s")
        
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                if third_element is None:
                    # –ê–≥–µ–Ω—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—Ä—Ö–∏–≤ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (–Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç–æ–º)
                    pass  # –ê—Ä—Ö–∏–≤ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                
                elif isinstance(third_element, str) and os.path.exists(third_element):
                    # –≠—Ç–æ –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    try:
                        from aiogram.types import FSInputFile
                        archive_name = os.path.basename(third_element)
                        document = FSInputFile(third_element, filename=archive_name)
                    
                        await message.reply_document(
                            document,
                            caption=status_msg if len(status_msg) <= 1024 else status_msg[:1021] + "..."
                        )
                    
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
                        try:
                            await asyncio.sleep(2)
                            os.remove(third_element)
                            temp_dir = os.path.dirname(third_element)
                            if os.path.exists(temp_dir) and not os.listdir(temp_dir):
                                os.rmdir(temp_dir)
                        except Exception as e:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤: {e}")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                        await message.reply(f"‚úÖ {status_msg}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤: {str(e)}")
                    
                elif isinstance(third_element, str):
                    # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    file_content = f"# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n"
                    file_content += f"**–ê–≥–µ–Ω—Ç:** @{agent_name}\n"
                    file_content += f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    file_content += f"**–ó–∞–ø—Ä–æ—Å:** {query.split(chr(10))[1] if chr(10) in query else query[:100]}\n\n"
                    file_content += "---\n\n"
                    file_content += third_element
                
                    file_bytes = file_content.encode('utf-8')
                    input_file = BufferedInputFile(
                        file=file_bytes,
                        filename=f"filejob_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                    )
                
                    await message.reply_document(
                        document=input_file,
                        caption="‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n" + status_msg
                    )
                else:
                    # –ü—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    await message.reply(status_msg, parse_mode="MarkdownV2")
            else:
                # –û—à–∏–±–∫–∞
                await message.reply(f"‚ùå {status_msg}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ fileworker –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}", exc_info=True)
            try:
                await progress_msg.delete()
            except:
                pass
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
          
    async def handle_cancel_job(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        job_id = callback.data.replace("cancel_job_", "")
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–≥–µ–Ω—Ç filejob
        if 'filejob' in self.parent.system_agents:
            filejob_agent = self.parent.system_agents['filejob']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞
            job_status = filejob_agent.get_job_status(job_id)
            
            if job_status and not job_status.get('cancelled'):
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
                if filejob_agent.cancel_job(job_id):
                    await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–∫–∏
                    processed = job_status.get('processed', 0)
                    total = len(job_status.get('files', []))
                    
                    cancel_text = (
                        "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed}/{total}\n"
                        "–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
                    )

                    activity_logger.log(str(callback.from_user.id), "AGENT_JOB_CANCELLED", f"agent=filejob,job_id={job_id}")
                    
                    if processed > 0:
                        cancel_text += "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
                    
                    try:
                        # –í–∞–∂–Ω–æ: —É–±–∏—Ä–∞–µ–º reply_markup —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É
                        await callback.message.edit_text(
                            cancel_text,
                            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
                else:
                    await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", show_alert=True)
            else:
                await callback.answer("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)